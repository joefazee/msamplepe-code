// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workflow_checkpoint.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createCheckpoint = `-- name: CreateCheckpoint :exec
INSERT INTO workflow_checkpoints (user_id, checkpoint_name, checkpoint_data, status, batch_id)
    VALUES ($1, $2, $3, $4, $5)
`

type CreateCheckpointParams struct {
	UserID         uuid.UUID       `json:"user_id"`
	CheckpointName string          `json:"checkpoint_name"`
	CheckpointData json.RawMessage `json:"checkpoint_data"`
	Status         string          `json:"status"`
	BatchID        string          `json:"batch_id"`
}

func (q *Queries) CreateCheckpoint(ctx context.Context, arg CreateCheckpointParams) error {
	_, err := q.db.ExecContext(ctx, createCheckpoint,
		arg.UserID,
		arg.CheckpointName,
		arg.CheckpointData,
		arg.Status,
		arg.BatchID,
	)
	return err
}

const deleteCheckpoint = `-- name: DeleteCheckpoint :exec
DELETE FROM workflow_checkpoints WHERE id = $1
`

func (q *Queries) DeleteCheckpoint(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCheckpoint, id)
	return err
}

const getCheckpoint = `-- name: GetCheckpoint :one
SELECT id, user_id, created_at, updated_at, checkpoint_name, checkpoint_data, status, batch_id FROM workflow_checkpoints WHERE user_id = $1 AND checkpoint_name = $2 AND status = $3 AND batch_id = $4 LIMIT 1
`

type GetCheckpointParams struct {
	UserID         uuid.UUID `json:"user_id"`
	CheckpointName string    `json:"checkpoint_name"`
	Status         string    `json:"status"`
	BatchID        string    `json:"batch_id"`
}

func (q *Queries) GetCheckpoint(ctx context.Context, arg GetCheckpointParams) (WorkflowCheckpoint, error) {
	row := q.db.QueryRowContext(ctx, getCheckpoint,
		arg.UserID,
		arg.CheckpointName,
		arg.Status,
		arg.BatchID,
	)
	var i WorkflowCheckpoint
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CheckpointName,
		&i.CheckpointData,
		&i.Status,
		&i.BatchID,
	)
	return i, err
}

const updateCheckpointStatus = `-- name: UpdateCheckpointStatus :exec
UPDATE workflow_checkpoints SET status = $2, updated_at = now() WHERE id = $1
`

type UpdateCheckpointStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateCheckpointStatus(ctx context.Context, arg UpdateCheckpointStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateCheckpointStatus, arg.ID, arg.Status)
	return err
}
