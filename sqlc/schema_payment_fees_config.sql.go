// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: schema_payment_fees_config.sql

package db

import (
	"context"

	"github.com/shopspring/decimal"
)

const createSchemaPaymentFeeConfig = `-- name: CreateSchemaPaymentFeeConfig :one
INSERT INTO schema_payment_fees_config (
    schema_name, is_percentage, amount, max_amount
) VALUES ($1, $2, $3, $4) RETURNING id, schema_name, is_percentage, amount, max_amount, updated_at
`

type CreateSchemaPaymentFeeConfigParams struct {
	SchemaName   string          `json:"schema_name"`
	IsPercentage bool            `json:"is_percentage"`
	Amount       decimal.Decimal `json:"amount"`
	MaxAmount    decimal.Decimal `json:"max_amount"`
}

func (q *Queries) CreateSchemaPaymentFeeConfig(ctx context.Context, arg CreateSchemaPaymentFeeConfigParams) (SchemaPaymentFeesConfig, error) {
	row := q.db.QueryRowContext(ctx, createSchemaPaymentFeeConfig,
		arg.SchemaName,
		arg.IsPercentage,
		arg.Amount,
		arg.MaxAmount,
	)
	var i SchemaPaymentFeesConfig
	err := row.Scan(
		&i.ID,
		&i.SchemaName,
		&i.IsPercentage,
		&i.Amount,
		&i.MaxAmount,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSchemaPaymentFeeConfig = `-- name: DeleteSchemaPaymentFeeConfig :exec
DELETE FROM schema_payment_fees_config WHERE LOWER(schema_name) = $1
`

func (q *Queries) DeleteSchemaPaymentFeeConfig(ctx context.Context, schemaName string) error {
	_, err := q.db.ExecContext(ctx, deleteSchemaPaymentFeeConfig, schemaName)
	return err
}

const getSchemaPaymentFeeConfig = `-- name: GetSchemaPaymentFeeConfig :one
SELECT id, schema_name, is_percentage, amount, max_amount, updated_at FROM schema_payment_fees_config WHERE LOWER(schema_name) = $1
`

func (q *Queries) GetSchemaPaymentFeeConfig(ctx context.Context, schemaName string) (SchemaPaymentFeesConfig, error) {
	row := q.db.QueryRowContext(ctx, getSchemaPaymentFeeConfig, schemaName)
	var i SchemaPaymentFeesConfig
	err := row.Scan(
		&i.ID,
		&i.SchemaName,
		&i.IsPercentage,
		&i.Amount,
		&i.MaxAmount,
		&i.UpdatedAt,
	)
	return i, err
}

const getSchemaPaymentFeeConfigs = `-- name: GetSchemaPaymentFeeConfigs :many
SELECT id, schema_name, is_percentage, amount, max_amount, updated_at FROM schema_payment_fees_config
`

func (q *Queries) GetSchemaPaymentFeeConfigs(ctx context.Context) ([]SchemaPaymentFeesConfig, error) {
	rows, err := q.db.QueryContext(ctx, getSchemaPaymentFeeConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SchemaPaymentFeesConfig{}
	for rows.Next() {
		var i SchemaPaymentFeesConfig
		if err := rows.Scan(
			&i.ID,
			&i.SchemaName,
			&i.IsPercentage,
			&i.Amount,
			&i.MaxAmount,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchemaPaymentFeeConfig = `-- name: UpdateSchemaPaymentFeeConfig :one
UPDATE schema_payment_fees_config SET is_percentage = $2, amount = $3, max_amount = $4 WHERE schema_name = $1 RETURNING id, schema_name, is_percentage, amount, max_amount, updated_at
`

type UpdateSchemaPaymentFeeConfigParams struct {
	SchemaName   string          `json:"schema_name"`
	IsPercentage bool            `json:"is_percentage"`
	Amount       decimal.Decimal `json:"amount"`
	MaxAmount    decimal.Decimal `json:"max_amount"`
}

func (q *Queries) UpdateSchemaPaymentFeeConfig(ctx context.Context, arg UpdateSchemaPaymentFeeConfigParams) (SchemaPaymentFeesConfig, error) {
	row := q.db.QueryRowContext(ctx, updateSchemaPaymentFeeConfig,
		arg.SchemaName,
		arg.IsPercentage,
		arg.Amount,
		arg.MaxAmount,
	)
	var i SchemaPaymentFeesConfig
	err := row.Scan(
		&i.ID,
		&i.SchemaName,
		&i.IsPercentage,
		&i.Amount,
		&i.MaxAmount,
		&i.UpdatedAt,
	)
	return i, err
}
