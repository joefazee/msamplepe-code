// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: business.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createBusinessKYB = `-- name: CreateBusinessKYB :one
INSERT INTO businesses (
    name,
    registration_number,
    business_nature,
    business_category,
    incorporation_region,
    address1,
    address2,
    city,
    post_code,
    state,
    country,
    website,
    product_description,
    registration_date,
    trading_address,
    trading_level,
    primary_contact_type,
    phone,
    email,
    contact_name,
    created_by
) VALUES (
     $1,
     $2,
     $3,
     $4,
     $5,
     $6,
     $7,
     $8,
     $9,
     $10,
     $11,
     $12,
     $13,
     $14,
     $15,
     $16,
     $17,
     $18,
     $19,
     $20,
     $21
) RETURNING id, name, registration_number, business_nature, business_category, address1, address2, city, post_code, state, country, website, product_description, registration_date, trading_address, trading_level, primary_contact_type, phone, email, contact_name, created_at, updated_at, created_by, incorporation_region, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason
`

type CreateBusinessKYBParams struct {
	Name                string          `json:"name"`
	RegistrationNumber  string          `json:"registration_number"`
	BusinessNature      string          `json:"business_nature"`
	BusinessCategory    string          `json:"business_category"`
	IncorporationRegion json.RawMessage `json:"incorporation_region"`
	Address1            string          `json:"address1"`
	Address2            string          `json:"address2"`
	City                string          `json:"city"`
	PostCode            string          `json:"post_code"`
	State               string          `json:"state"`
	Country             string          `json:"country"`
	Website             string          `json:"website"`
	ProductDescription  string          `json:"product_description"`
	RegistrationDate    string          `json:"registration_date"`
	TradingAddress      string          `json:"trading_address"`
	TradingLevel        string          `json:"trading_level"`
	PrimaryContactType  string          `json:"primary_contact_type"`
	Phone               string          `json:"phone"`
	Email               string          `json:"email"`
	ContactName         string          `json:"contact_name"`
	CreatedBy           uuid.UUID       `json:"created_by"`
}

func (q *Queries) CreateBusinessKYB(ctx context.Context, arg CreateBusinessKYBParams) (Business, error) {
	row := q.db.QueryRowContext(ctx, createBusinessKYB,
		arg.Name,
		arg.RegistrationNumber,
		arg.BusinessNature,
		arg.BusinessCategory,
		arg.IncorporationRegion,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.PostCode,
		arg.State,
		arg.Country,
		arg.Website,
		arg.ProductDescription,
		arg.RegistrationDate,
		arg.TradingAddress,
		arg.TradingLevel,
		arg.PrimaryContactType,
		arg.Phone,
		arg.Email,
		arg.ContactName,
		arg.CreatedBy,
	)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RegistrationNumber,
		&i.BusinessNature,
		&i.BusinessCategory,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.PostCode,
		&i.State,
		&i.Country,
		&i.Website,
		&i.ProductDescription,
		&i.RegistrationDate,
		&i.TradingAddress,
		&i.TradingLevel,
		&i.PrimaryContactType,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.IncorporationRegion,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const createBusinessOwner = `-- name: CreateBusinessOwner :one
INSERT INTO business_owners (
    business_id,
    owner_role,
    first_name,
    last_name,
    dob,
    id_type,
    id_number,
    nationality,
    address1,
    address2,
    state,
    city,
    country,
    is_ubo,
    holding_ratio,
    linked_user_id
) VALUES (
     $1,
     $2,
     $3,
     $4,
     $5,
     $6,
     $7,
     $8,
     $9,
     $10,
     $11,
     $12,
     $13,
     $14,
     $15,
     $16
) RETURNING id, business_id, owner_role, first_name, last_name, dob, id_type, id_number, nationality, address1, address2, state, city, country, is_ubo, holding_ratio, created_at, updated_at, linked_user_id, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason
`

type CreateBusinessOwnerParams struct {
	BusinessID   uuid.UUID     `json:"business_id"`
	OwnerRole    string        `json:"owner_role"`
	FirstName    string        `json:"first_name"`
	LastName     string        `json:"last_name"`
	Dob          string        `json:"dob"`
	IDType       string        `json:"id_type"`
	IDNumber     string        `json:"id_number"`
	Nationality  string        `json:"nationality"`
	Address1     string        `json:"address1"`
	Address2     string        `json:"address2"`
	State        string        `json:"state"`
	City         string        `json:"city"`
	Country      string        `json:"country"`
	IsUbo        bool          `json:"is_ubo"`
	HoldingRatio int16         `json:"holding_ratio"`
	LinkedUserID uuid.NullUUID `json:"linked_user_id"`
}

func (q *Queries) CreateBusinessOwner(ctx context.Context, arg CreateBusinessOwnerParams) (BusinessOwner, error) {
	row := q.db.QueryRowContext(ctx, createBusinessOwner,
		arg.BusinessID,
		arg.OwnerRole,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.IDType,
		arg.IDNumber,
		arg.Nationality,
		arg.Address1,
		arg.Address2,
		arg.State,
		arg.City,
		arg.Country,
		arg.IsUbo,
		arg.HoldingRatio,
		arg.LinkedUserID,
	)
	var i BusinessOwner
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.OwnerRole,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.IDType,
		&i.IDNumber,
		&i.Nationality,
		&i.Address1,
		&i.Address2,
		&i.State,
		&i.City,
		&i.Country,
		&i.IsUbo,
		&i.HoldingRatio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LinkedUserID,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const getBusinessByID = `-- name: GetBusinessByID :one
SELECT id, name, registration_number, business_nature, business_category, address1, address2, city, post_code, state, country, website, product_description, registration_date, trading_address, trading_level, primary_contact_type, phone, email, contact_name, created_at, updated_at, created_by, incorporation_region, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason FROM businesses WHERE id = $1 LIMIT  1
`

func (q *Queries) GetBusinessByID(ctx context.Context, id uuid.UUID) (Business, error) {
	row := q.db.QueryRowContext(ctx, getBusinessByID, id)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RegistrationNumber,
		&i.BusinessNature,
		&i.BusinessCategory,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.PostCode,
		&i.State,
		&i.Country,
		&i.Website,
		&i.ProductDescription,
		&i.RegistrationDate,
		&i.TradingAddress,
		&i.TradingLevel,
		&i.PrimaryContactType,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.IncorporationRegion,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const getBusinessByName = `-- name: GetBusinessByName :one
SELECT id, name, registration_number, business_nature, business_category, address1, address2, city, post_code, state, country, website, product_description, registration_date, trading_address, trading_level, primary_contact_type, phone, email, contact_name, created_at, updated_at, created_by, incorporation_region, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason FROM businesses WHERE name = $1 LIMIT  1
`

func (q *Queries) GetBusinessByName(ctx context.Context, name string) (Business, error) {
	row := q.db.QueryRowContext(ctx, getBusinessByName, name)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RegistrationNumber,
		&i.BusinessNature,
		&i.BusinessCategory,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.PostCode,
		&i.State,
		&i.Country,
		&i.Website,
		&i.ProductDescription,
		&i.RegistrationDate,
		&i.TradingAddress,
		&i.TradingLevel,
		&i.PrimaryContactType,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.IncorporationRegion,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const getBusinessCreatedByUser = `-- name: GetBusinessCreatedByUser :one
SELECT id, name, registration_number, business_nature, business_category, address1, address2, city, post_code, state, country, website, product_description, registration_date, trading_address, trading_level, primary_contact_type, phone, email, contact_name, created_at, updated_at, created_by, incorporation_region, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason FROM businesses WHERE created_by = $1 LIMIT  1
`

func (q *Queries) GetBusinessCreatedByUser(ctx context.Context, createdBy uuid.UUID) (Business, error) {
	row := q.db.QueryRowContext(ctx, getBusinessCreatedByUser, createdBy)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RegistrationNumber,
		&i.BusinessNature,
		&i.BusinessCategory,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.PostCode,
		&i.State,
		&i.Country,
		&i.Website,
		&i.ProductDescription,
		&i.RegistrationDate,
		&i.TradingAddress,
		&i.TradingLevel,
		&i.PrimaryContactType,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.IncorporationRegion,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const getBusinessCreatedByUserByBusinessID = `-- name: GetBusinessCreatedByUserByBusinessID :one
SELECT id, name, registration_number, business_nature, business_category, address1, address2, city, post_code, state, country, website, product_description, registration_date, trading_address, trading_level, primary_contact_type, phone, email, contact_name, created_at, updated_at, created_by, incorporation_region, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason FROM businesses WHERE created_by = $1 AND id = $2 LIMIT  1
`

type GetBusinessCreatedByUserByBusinessIDParams struct {
	CreatedBy uuid.UUID `json:"created_by"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) GetBusinessCreatedByUserByBusinessID(ctx context.Context, arg GetBusinessCreatedByUserByBusinessIDParams) (Business, error) {
	row := q.db.QueryRowContext(ctx, getBusinessCreatedByUserByBusinessID, arg.CreatedBy, arg.ID)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RegistrationNumber,
		&i.BusinessNature,
		&i.BusinessCategory,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.PostCode,
		&i.State,
		&i.Country,
		&i.Website,
		&i.ProductDescription,
		&i.RegistrationDate,
		&i.TradingAddress,
		&i.TradingLevel,
		&i.PrimaryContactType,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.IncorporationRegion,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const getBusinessOwner = `-- name: GetBusinessOwner :one
SELECT id, business_id, owner_role, first_name, last_name, dob, id_type, id_number, nationality, address1, address2, state, city, country, is_ubo, holding_ratio, created_at, updated_at, linked_user_id, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason FROM business_owners WHERE id = $1 LIMIT  1
`

func (q *Queries) GetBusinessOwner(ctx context.Context, id uuid.UUID) (BusinessOwner, error) {
	row := q.db.QueryRowContext(ctx, getBusinessOwner, id)
	var i BusinessOwner
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.OwnerRole,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.IDType,
		&i.IDNumber,
		&i.Nationality,
		&i.Address1,
		&i.Address2,
		&i.State,
		&i.City,
		&i.Country,
		&i.IsUbo,
		&i.HoldingRatio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LinkedUserID,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const getBusinessOwnerByID = `-- name: GetBusinessOwnerByID :one
SELECT id, business_id, owner_role, first_name, last_name, dob, id_type, id_number, nationality, address1, address2, state, city, country, is_ubo, holding_ratio, created_at, updated_at, linked_user_id, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason FROM business_owners WHERE id = $1 AND business_id = $2 LIMIT  1
`

type GetBusinessOwnerByIDParams struct {
	ID         uuid.UUID `json:"id"`
	BusinessID uuid.UUID `json:"business_id"`
}

func (q *Queries) GetBusinessOwnerByID(ctx context.Context, arg GetBusinessOwnerByIDParams) (BusinessOwner, error) {
	row := q.db.QueryRowContext(ctx, getBusinessOwnerByID, arg.ID, arg.BusinessID)
	var i BusinessOwner
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.OwnerRole,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.IDType,
		&i.IDNumber,
		&i.Nationality,
		&i.Address1,
		&i.Address2,
		&i.State,
		&i.City,
		&i.Country,
		&i.IsUbo,
		&i.HoldingRatio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LinkedUserID,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const getBusinessOwnerByLinkedUser = `-- name: GetBusinessOwnerByLinkedUser :one
SELECT id, business_id, owner_role, first_name, last_name, dob, id_type, id_number, nationality, address1, address2, state, city, country, is_ubo, holding_ratio, created_at, updated_at, linked_user_id, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason FROM business_owners WHERE linked_user_id = $1
`

func (q *Queries) GetBusinessOwnerByLinkedUser(ctx context.Context, linkedUserID uuid.NullUUID) (BusinessOwner, error) {
	row := q.db.QueryRowContext(ctx, getBusinessOwnerByLinkedUser, linkedUserID)
	var i BusinessOwner
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.OwnerRole,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.IDType,
		&i.IDNumber,
		&i.Nationality,
		&i.Address1,
		&i.Address2,
		&i.State,
		&i.City,
		&i.Country,
		&i.IsUbo,
		&i.HoldingRatio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LinkedUserID,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const getBusinessOwnersByBusinessID = `-- name: GetBusinessOwnersByBusinessID :many
SELECT id, business_id, owner_role, first_name, last_name, dob, id_type, id_number, nationality, address1, address2, state, city, country, is_ubo, holding_ratio, created_at, updated_at, linked_user_id, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason FROM business_owners WHERE business_id = $1
`

func (q *Queries) GetBusinessOwnersByBusinessID(ctx context.Context, businessID uuid.UUID) ([]BusinessOwner, error) {
	rows, err := q.db.QueryContext(ctx, getBusinessOwnersByBusinessID, businessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BusinessOwner{}
	for rows.Next() {
		var i BusinessOwner
		if err := rows.Scan(
			&i.ID,
			&i.BusinessID,
			&i.OwnerRole,
			&i.FirstName,
			&i.LastName,
			&i.Dob,
			&i.IDType,
			&i.IDNumber,
			&i.Nationality,
			&i.Address1,
			&i.Address2,
			&i.State,
			&i.City,
			&i.Country,
			&i.IsUbo,
			&i.HoldingRatio,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LinkedUserID,
			&i.ApprovalStatus,
			&i.ApprovalStatusUpdatedAt,
			&i.ApprovalStatusUpdatedBy,
			&i.ApprovalStatusReason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBusinessDetails = `-- name: UpdateBusinessDetails :one
UPDATE businesses
SET name = COALESCE($1, name),
    registration_number = COALESCE($2, registration_number),
    business_nature = COALESCE($3, business_nature),
    business_category = COALESCE($4, business_category),
    incorporation_region = COALESCE($5, incorporation_region),
    address1 = COALESCE($6, address1),
    address2 = COALESCE($7, address2),
    state = COALESCE($8, state),
    city = COALESCE($9, city),
    post_code = COALESCE($10, post_code),
    country = COALESCE($11, country),
    website = COALESCE($12, website),
    product_description = COALESCE($13, product_description),
    registration_date = COALESCE($14, registration_date),
    trading_address = COALESCE($15, trading_address),
    trading_level = COALESCE($16, trading_level),
    primary_contact_type = COALESCE($17, primary_contact_type),
    phone = COALESCE($18, phone),
    email = COALESCE($19, email),
    contact_name = COALESCE($20, contact_name),
    updated_at = COALESCE($21, updated_at)
WHERE id = $22 RETURNING id, name, registration_number, business_nature, business_category, address1, address2, city, post_code, state, country, website, product_description, registration_date, trading_address, trading_level, primary_contact_type, phone, email, contact_name, created_at, updated_at, created_by, incorporation_region, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason
`

type UpdateBusinessDetailsParams struct {
	Name                sql.NullString        `json:"name"`
	RegistrationNumber  sql.NullString        `json:"registration_number"`
	BusinessNature      sql.NullString        `json:"business_nature"`
	BusinessCategory    sql.NullString        `json:"business_category"`
	IncorporationRegion pqtype.NullRawMessage `json:"incorporation_region"`
	Address1            sql.NullString        `json:"address1"`
	Address2            sql.NullString        `json:"address2"`
	State               sql.NullString        `json:"state"`
	City                sql.NullString        `json:"city"`
	PostCode            sql.NullString        `json:"post_code"`
	Country             sql.NullString        `json:"country"`
	Website             sql.NullString        `json:"website"`
	ProductDescription  sql.NullString        `json:"product_description"`
	RegistrationDate    sql.NullString        `json:"registration_date"`
	TradingAddress      sql.NullString        `json:"trading_address"`
	TradingLevel        sql.NullString        `json:"trading_level"`
	PrimaryContactType  sql.NullString        `json:"primary_contact_type"`
	Phone               sql.NullString        `json:"phone"`
	Email               sql.NullString        `json:"email"`
	ContactName         sql.NullString        `json:"contact_name"`
	UpdatedAt           sql.NullTime          `json:"updated_at"`
	ID                  uuid.UUID             `json:"id"`
}

func (q *Queries) UpdateBusinessDetails(ctx context.Context, arg UpdateBusinessDetailsParams) (Business, error) {
	row := q.db.QueryRowContext(ctx, updateBusinessDetails,
		arg.Name,
		arg.RegistrationNumber,
		arg.BusinessNature,
		arg.BusinessCategory,
		arg.IncorporationRegion,
		arg.Address1,
		arg.Address2,
		arg.State,
		arg.City,
		arg.PostCode,
		arg.Country,
		arg.Website,
		arg.ProductDescription,
		arg.RegistrationDate,
		arg.TradingAddress,
		arg.TradingLevel,
		arg.PrimaryContactType,
		arg.Phone,
		arg.Email,
		arg.ContactName,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RegistrationNumber,
		&i.BusinessNature,
		&i.BusinessCategory,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.PostCode,
		&i.State,
		&i.Country,
		&i.Website,
		&i.ProductDescription,
		&i.RegistrationDate,
		&i.TradingAddress,
		&i.TradingLevel,
		&i.PrimaryContactType,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.IncorporationRegion,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}

const updateBusinessOwnerByID = `-- name: UpdateBusinessOwnerByID :one
UPDATE business_owners
SET owner_role = COALESCE($1, owner_role),
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    dob = COALESCE($4, dob),
    id_type = COALESCE($5, id_type),
    business_id = COALESCE($6, business_id),
    id_number = COALESCE($7, id_number),
    nationality = COALESCE($8, nationality),
    address1 = COALESCE($9, address1),
    address2 = COALESCE($10, address2),
    state = COALESCE($11, state),
    city = COALESCE($12, city),
    is_ubo = COALESCE($13, is_ubo),
    holding_ratio = COALESCE($14, holding_ratio),
    linked_user_id = COALESCE($15, linked_user_id),
    updated_at = COALESCE($16, updated_at)
WHERE id = $17 RETURNING id, business_id, owner_role, first_name, last_name, dob, id_type, id_number, nationality, address1, address2, state, city, country, is_ubo, holding_ratio, created_at, updated_at, linked_user_id, approval_status, approval_status_updated_at, approval_status_updated_by, approval_status_reason
`

type UpdateBusinessOwnerByIDParams struct {
	OwnerRole    sql.NullString `json:"owner_role"`
	FirstName    sql.NullString `json:"first_name"`
	LastName     sql.NullString `json:"last_name"`
	Dob          sql.NullString `json:"dob"`
	IDType       sql.NullString `json:"id_type"`
	BusinessID   uuid.NullUUID  `json:"business_id"`
	IDNumber     sql.NullString `json:"id_number"`
	Nationality  sql.NullString `json:"nationality"`
	Address1     sql.NullString `json:"address1"`
	Address2     sql.NullString `json:"address2"`
	State        sql.NullString `json:"state"`
	City         sql.NullString `json:"city"`
	IsUbo        sql.NullBool   `json:"is_ubo"`
	HoldingRatio sql.NullInt16  `json:"holding_ratio"`
	LinkedUserID uuid.NullUUID  `json:"linked_user_id"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
	ID           uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateBusinessOwnerByID(ctx context.Context, arg UpdateBusinessOwnerByIDParams) (BusinessOwner, error) {
	row := q.db.QueryRowContext(ctx, updateBusinessOwnerByID,
		arg.OwnerRole,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.IDType,
		arg.BusinessID,
		arg.IDNumber,
		arg.Nationality,
		arg.Address1,
		arg.Address2,
		arg.State,
		arg.City,
		arg.IsUbo,
		arg.HoldingRatio,
		arg.LinkedUserID,
		arg.UpdatedAt,
		arg.ID,
	)
	var i BusinessOwner
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.OwnerRole,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.IDType,
		&i.IDNumber,
		&i.Nationality,
		&i.Address1,
		&i.Address2,
		&i.State,
		&i.City,
		&i.Country,
		&i.IsUbo,
		&i.HoldingRatio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LinkedUserID,
		&i.ApprovalStatus,
		&i.ApprovalStatusUpdatedAt,
		&i.ApprovalStatusUpdatedBy,
		&i.ApprovalStatusReason,
	)
	return i, err
}
