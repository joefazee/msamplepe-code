// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dealers.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDealer = `-- name: CreateDealer :one
INSERT INTO dealers (name, bank_account_number, bank_code, created_by) VALUES ($1, $2, $3, $4) RETURNING id, name, bank_account_number, bank_code, created_by, created_at, updated_at
`

type CreateDealerParams struct {
	Name              string    `json:"name"`
	BankAccountNumber string    `json:"bank_account_number"`
	BankCode          string    `json:"bank_code"`
	CreatedBy         uuid.UUID `json:"created_by"`
}

func (q *Queries) CreateDealer(ctx context.Context, arg CreateDealerParams) (Dealer, error) {
	row := q.db.QueryRowContext(ctx, createDealer,
		arg.Name,
		arg.BankAccountNumber,
		arg.BankCode,
		arg.CreatedBy,
	)
	var i Dealer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BankAccountNumber,
		&i.BankCode,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDealer = `-- name: DeleteDealer :exec
DELETE FROM dealers WHERE id = $1
`

func (q *Queries) DeleteDealer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDealer, id)
	return err
}

const getAllDealers = `-- name: GetAllDealers :many
SELECT dealers.id, dealers.name, dealers.bank_account_number, dealers.bank_code, dealers.created_by, dealers.created_at, dealers.updated_at, banks.name as bank_name FROM dealers
INNER JOIN banks ON dealers.bank_code = banks.code
ORDER BY dealers.created_at ASC
`

type GetAllDealersRow struct {
	ID                uuid.UUID `json:"id"`
	Name              string    `json:"name"`
	BankAccountNumber string    `json:"bank_account_number"`
	BankCode          string    `json:"bank_code"`
	CreatedBy         uuid.UUID `json:"created_by"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	BankName          string    `json:"bank_name"`
}

func (q *Queries) GetAllDealers(ctx context.Context) ([]GetAllDealersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllDealers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllDealersRow{}
	for rows.Next() {
		var i GetAllDealersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BankAccountNumber,
			&i.BankCode,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BankName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDealer = `-- name: GetDealer :one
SELECT id, name, bank_account_number, bank_code, created_by, created_at, updated_at FROM dealers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDealer(ctx context.Context, id uuid.UUID) (Dealer, error) {
	row := q.db.QueryRowContext(ctx, getDealer, id)
	var i Dealer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BankAccountNumber,
		&i.BankCode,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
