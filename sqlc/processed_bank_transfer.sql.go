// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: processed_bank_transfer.sql

package db

import (
	"context"
)

const createProcessesBankTransfer = `-- name: CreateProcessesBankTransfer :exec
INSERT INTO processed_bank_transfers (trans_ref, provider) VALUES ($1, $2)
`

type CreateProcessesBankTransferParams struct {
	TransRef string `json:"trans_ref"`
	Provider string `json:"provider"`
}

func (q *Queries) CreateProcessesBankTransfer(ctx context.Context, arg CreateProcessesBankTransferParams) error {
	_, err := q.db.ExecContext(ctx, createProcessesBankTransfer, arg.TransRef, arg.Provider)
	return err
}

const findProcessesBankTransfer = `-- name: FindProcessesBankTransfer :one
SELECT trans_ref, provider, created_at, updated_at FROM processed_bank_transfers WHERE trans_ref = $1 AND provider = $2 LIMIT 1
`

type FindProcessesBankTransferParams struct {
	TransRef string `json:"trans_ref"`
	Provider string `json:"provider"`
}

func (q *Queries) FindProcessesBankTransfer(ctx context.Context, arg FindProcessesBankTransferParams) (ProcessedBankTransfer, error) {
	row := q.db.QueryRowContext(ctx, findProcessesBankTransfer, arg.TransRef, arg.Provider)
	var i ProcessedBankTransfer
	err := row.Scan(
		&i.TransRef,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
