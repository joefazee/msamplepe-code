// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inflow_bank_transfer.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createInflowBankTransfer = `-- name: CreateInflowBankTransfer :one
INSERT INTO inflow_bank_transfers (user_id, wallet_id, amount, provider, status, payload, remark)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, user_id, wallet_id, amount, provider, status, payload, remark, created_at, updated_at
`

type CreateInflowBankTransferParams struct {
	UserID   uuid.UUID       `json:"user_id"`
	WalletID uuid.UUID       `json:"wallet_id"`
	Amount   decimal.Decimal `json:"amount"`
	Provider string          `json:"provider"`
	Status   string          `json:"status"`
	Payload  json.RawMessage `json:"payload"`
	Remark   string          `json:"remark"`
}

func (q *Queries) CreateInflowBankTransfer(ctx context.Context, arg CreateInflowBankTransferParams) (InflowBankTransfer, error) {
	row := q.db.QueryRowContext(ctx, createInflowBankTransfer,
		arg.UserID,
		arg.WalletID,
		arg.Amount,
		arg.Provider,
		arg.Status,
		arg.Payload,
		arg.Remark,
	)
	var i InflowBankTransfer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletID,
		&i.Amount,
		&i.Provider,
		&i.Status,
		&i.Payload,
		&i.Remark,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInflowBankTransferById = `-- name: GetInflowBankTransferById :one
SELECT id, user_id, wallet_id, amount, provider, status, payload, remark, created_at, updated_at FROM inflow_bank_transfers WHERE id = $1
`

func (q *Queries) GetInflowBankTransferById(ctx context.Context, id uuid.UUID) (InflowBankTransfer, error) {
	row := q.db.QueryRowContext(ctx, getInflowBankTransferById, id)
	var i InflowBankTransfer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletID,
		&i.Amount,
		&i.Provider,
		&i.Status,
		&i.Payload,
		&i.Remark,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaginatedInflowBankTransfers = `-- name: GetPaginatedInflowBankTransfers :many
SELECT count(*) OVER() AS total_records, id, user_id, wallet_id, amount, provider, status, payload, remark, created_at, updated_at FROM inflow_bank_transfers ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetPaginatedInflowBankTransfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPaginatedInflowBankTransfersRow struct {
	TotalRecords int64           `json:"total_records"`
	ID           uuid.UUID       `json:"id"`
	UserID       uuid.UUID       `json:"user_id"`
	WalletID     uuid.UUID       `json:"wallet_id"`
	Amount       decimal.Decimal `json:"amount"`
	Provider     string          `json:"provider"`
	Status       string          `json:"status"`
	Payload      json.RawMessage `json:"payload"`
	Remark       string          `json:"remark"`
	CreatedAt    time.Time       `json:"created_at"`
	UpdatedAt    time.Time       `json:"updated_at"`
}

func (q *Queries) GetPaginatedInflowBankTransfers(ctx context.Context, arg GetPaginatedInflowBankTransfersParams) ([]GetPaginatedInflowBankTransfersRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedInflowBankTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPaginatedInflowBankTransfersRow{}
	for rows.Next() {
		var i GetPaginatedInflowBankTransfersRow
		if err := rows.Scan(
			&i.TotalRecords,
			&i.ID,
			&i.UserID,
			&i.WalletID,
			&i.Amount,
			&i.Provider,
			&i.Status,
			&i.Payload,
			&i.Remark,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnprocessedInflow = `-- name: GetUnprocessedInflow :many
SELECT id, user_id, wallet_id, amount, provider, status, payload, remark, created_at, updated_at FROM inflow_bank_transfers WHERE status = 'pending' AND amount < $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetUnprocessedInflowParams struct {
	Amount decimal.Decimal `json:"amount"`
	Limit  int32           `json:"limit"`
	Offset int32           `json:"offset"`
}

func (q *Queries) GetUnprocessedInflow(ctx context.Context, arg GetUnprocessedInflowParams) ([]InflowBankTransfer, error) {
	rows, err := q.db.QueryContext(ctx, getUnprocessedInflow, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InflowBankTransfer{}
	for rows.Next() {
		var i InflowBankTransfer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WalletID,
			&i.Amount,
			&i.Provider,
			&i.Status,
			&i.Payload,
			&i.Remark,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInflowBankTransferStatus = `-- name: UpdateInflowBankTransferStatus :one
UPDATE inflow_bank_transfers SET status = $1 WHERE id = $2 RETURNING id, user_id, wallet_id, amount, provider, status, payload, remark, created_at, updated_at
`

type UpdateInflowBankTransferStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateInflowBankTransferStatus(ctx context.Context, arg UpdateInflowBankTransferStatusParams) (InflowBankTransfer, error) {
	row := q.db.QueryRowContext(ctx, updateInflowBankTransferStatus, arg.Status, arg.ID)
	var i InflowBankTransfer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletID,
		&i.Amount,
		&i.Provider,
		&i.Status,
		&i.Payload,
		&i.Remark,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
