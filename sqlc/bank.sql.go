// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: bank.sql

package db

import (
	"context"
)

const getAllBanks = `-- name: GetAllBanks :many
SELECT id, name, slug, code, longcode, gateway, pay_with_bank, active, country, currency, type, is_deleted, created_at, updated_at FROM banks WHERE is_deleted = FALSE AND active = true ORDER BY name ASC
`

func (q *Queries) GetAllBanks(ctx context.Context) ([]Bank, error) {
	rows, err := q.db.QueryContext(ctx, getAllBanks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bank{}
	for rows.Next() {
		var i Bank
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Code,
			&i.Longcode,
			&i.Gateway,
			&i.PayWithBank,
			&i.Active,
			&i.Country,
			&i.Currency,
			&i.Type,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBank = `-- name: GetBank :one
SELECT id, name, slug, code, longcode, gateway, pay_with_bank, active, country, currency, type, is_deleted, created_at, updated_at FROM banks WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBank(ctx context.Context, id int32) (Bank, error) {
	row := q.db.QueryRowContext(ctx, getBank, id)
	var i Bank
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Code,
		&i.Longcode,
		&i.Gateway,
		&i.PayWithBank,
		&i.Active,
		&i.Country,
		&i.Currency,
		&i.Type,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBankByCode = `-- name: GetBankByCode :one
SELECT id, name, slug, code, longcode, gateway, pay_with_bank, active, country, currency, type, is_deleted, created_at, updated_at FROM banks WHERE code = $1 LIMIT 1
`

func (q *Queries) GetBankByCode(ctx context.Context, code string) (Bank, error) {
	row := q.db.QueryRowContext(ctx, getBankByCode, code)
	var i Bank
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Code,
		&i.Longcode,
		&i.Gateway,
		&i.PayWithBank,
		&i.Active,
		&i.Country,
		&i.Currency,
		&i.Type,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
