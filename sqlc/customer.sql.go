// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (name, email,phone, owner_id) VALUES ($1, $2, $3, $4) RETURNING id, owner_id, name, phone, email, created_at, updated_at
`

type CreateCustomerParams struct {
	Name    string    `json:"name"`
	Email   string    `json:"email"`
	Phone   string    `json:"phone"`
	OwnerID uuid.UUID `json:"owner_id"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.OwnerID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers WHERE owner_id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, ownerID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, ownerID)
	return err
}

const findCustomerByEmail = `-- name: FindCustomerByEmail :one
SELECT id, owner_id, name, phone, email, created_at, updated_at FROM customers WHERE owner_id = $1 AND email = $2 LIMIT 1
`

type FindCustomerByEmailParams struct {
	OwnerID uuid.UUID `json:"owner_id"`
	Email   string    `json:"email"`
}

func (q *Queries) FindCustomerByEmail(ctx context.Context, arg FindCustomerByEmailParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, findCustomerByEmail, arg.OwnerID, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCustomerById = `-- name: FindCustomerById :one
SELECT id, owner_id, name, phone, email, created_at, updated_at FROM customers WHERE owner_id = $1 AND id = $2 LIMIT 1
`

type FindCustomerByIdParams struct {
	OwnerID uuid.UUID `json:"owner_id"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) FindCustomerById(ctx context.Context, arg FindCustomerByIdParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, findCustomerById, arg.OwnerID, arg.ID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCustomerByPhone = `-- name: FindCustomerByPhone :one
SELECT id, owner_id, name, phone, email, created_at, updated_at FROM customers WHERE owner_id = $1 AND phone = $2 LIMIT 1
`

type FindCustomerByPhoneParams struct {
	OwnerID uuid.UUID `json:"owner_id"`
	Phone   string    `json:"phone"`
}

func (q *Queries) FindCustomerByPhone(ctx context.Context, arg FindCustomerByPhoneParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, findCustomerByPhone, arg.OwnerID, arg.Phone)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET name = COALESCE($1, name),
    phone = COALESCE($2, phone),
    email = COALESCE($3, email)
WHERE id = $4 RETURNING id, owner_id, name, phone, email, created_at, updated_at
`

type UpdateCustomerParams struct {
	Name  sql.NullString `json:"name"`
	Phone sql.NullString `json:"phone"`
	Email sql.NullString `json:"email"`
	ID    uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.ID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
