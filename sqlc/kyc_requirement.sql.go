// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: kyc_requirement.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createKYCRequirement = `-- name: CreateKYCRequirement :exec
INSERT INTO kyc_requirements (
    payload ,target, target_id, deadline, title, description
) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateKYCRequirementParams struct {
	Payload     json.RawMessage `json:"payload"`
	Target      string          `json:"target"`
	TargetID    string          `json:"target_id"`
	Deadline    sql.NullTime    `json:"deadline"`
	Title       string          `json:"title"`
	Description string          `json:"description"`
}

func (q *Queries) CreateKYCRequirement(ctx context.Context, arg CreateKYCRequirementParams) error {
	_, err := q.db.ExecContext(ctx, createKYCRequirement,
		arg.Payload,
		arg.Target,
		arg.TargetID,
		arg.Deadline,
		arg.Title,
		arg.Description,
	)
	return err
}

const createUserKYCRequirement = `-- name: CreateUserKYCRequirement :one
INSERT INTO kyc_requirements_users (
    kyc_requirement_id, user_id, payload
) VALUES ($1, $2, $3) RETURNING id, kyc_requirement_id, user_id, payload, status, created_at
`

type CreateUserKYCRequirementParams struct {
	KycRequirementID uuid.UUID       `json:"kyc_requirement_id"`
	UserID           uuid.UUID       `json:"user_id"`
	Payload          json.RawMessage `json:"payload"`
}

func (q *Queries) CreateUserKYCRequirement(ctx context.Context, arg CreateUserKYCRequirementParams) (KycRequirementsUser, error) {
	row := q.db.QueryRowContext(ctx, createUserKYCRequirement, arg.KycRequirementID, arg.UserID, arg.Payload)
	var i KycRequirementsUser
	err := row.Scan(
		&i.ID,
		&i.KycRequirementID,
		&i.UserID,
		&i.Payload,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserKYCRequirementResults = `-- name: DeleteUserKYCRequirementResults :exec
DELETE FROM dynamic_kyc_results WHERE kyc_requirement_id = $1
`

func (q *Queries) DeleteUserKYCRequirementResults(ctx context.Context, kycRequirementID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserKYCRequirementResults, kycRequirementID)
	return err
}

const getActiveKYCRequirement = `-- name: GetActiveKYCRequirement :one
SELECT id, title, description, payload, target, target_id, deadline, status, created_at FROM kyc_requirements WHERE target = $1 AND target_id = $2 AND status = 'active'
`

type GetActiveKYCRequirementParams struct {
	Target   string `json:"target"`
	TargetID string `json:"target_id"`
}

func (q *Queries) GetActiveKYCRequirement(ctx context.Context, arg GetActiveKYCRequirementParams) (KycRequirement, error) {
	row := q.db.QueryRowContext(ctx, getActiveKYCRequirement, arg.Target, arg.TargetID)
	var i KycRequirement
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Payload,
		&i.Target,
		&i.TargetID,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getActiveKYCRequirementByID = `-- name: GetActiveKYCRequirementByID :one
SELECT id, title, description, payload, target, target_id, deadline, status, created_at FROM kyc_requirements WHERE id = $1 AND status = 'active'
`

func (q *Queries) GetActiveKYCRequirementByID(ctx context.Context, id uuid.UUID) (KycRequirement, error) {
	row := q.db.QueryRowContext(ctx, getActiveKYCRequirementByID, id)
	var i KycRequirement
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Payload,
		&i.Target,
		&i.TargetID,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getKYCRequirement = `-- name: GetKYCRequirement :one
SELECT id, title, description, payload, target, target_id, deadline, status, created_at FROM kyc_requirements WHERE target = $1 AND target_id = $2
`

type GetKYCRequirementParams struct {
	Target   string `json:"target"`
	TargetID string `json:"target_id"`
}

func (q *Queries) GetKYCRequirement(ctx context.Context, arg GetKYCRequirementParams) (KycRequirement, error) {
	row := q.db.QueryRowContext(ctx, getKYCRequirement, arg.Target, arg.TargetID)
	var i KycRequirement
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Payload,
		&i.Target,
		&i.TargetID,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getKYCRequirementByID = `-- name: GetKYCRequirementByID :one
SELECT id, title, description, payload, target, target_id, deadline, status, created_at FROM kyc_requirements WHERE id = $1
`

func (q *Queries) GetKYCRequirementByID(ctx context.Context, id uuid.UUID) (KycRequirement, error) {
	row := q.db.QueryRowContext(ctx, getKYCRequirementByID, id)
	var i KycRequirement
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Payload,
		&i.Target,
		&i.TargetID,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getKYCRequirements = `-- name: GetKYCRequirements :many
SELECT id, title, description, payload, target, target_id, deadline, status, created_at FROM kyc_requirements
`

func (q *Queries) GetKYCRequirements(ctx context.Context) ([]KycRequirement, error) {
	rows, err := q.db.QueryContext(ctx, getKYCRequirements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []KycRequirement{}
	for rows.Next() {
		var i KycRequirement
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Payload,
			&i.Target,
			&i.TargetID,
			&i.Deadline,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKYCRequirementsByTarget = `-- name: GetKYCRequirementsByTarget :many
SELECT id, title, description, payload, target, target_id, deadline, status, created_at FROM kyc_requirements WHERE target = $1 AND target_id = $2
`

type GetKYCRequirementsByTargetParams struct {
	Target   string `json:"target"`
	TargetID string `json:"target_id"`
}

func (q *Queries) GetKYCRequirementsByTarget(ctx context.Context, arg GetKYCRequirementsByTargetParams) ([]KycRequirement, error) {
	rows, err := q.db.QueryContext(ctx, getKYCRequirementsByTarget, arg.Target, arg.TargetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []KycRequirement{}
	for rows.Next() {
		var i KycRequirement
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Payload,
			&i.Target,
			&i.TargetID,
			&i.Deadline,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getManyUserKYCRequirements = `-- name: GetManyUserKYCRequirements :many
SELECT kr.id, kr.title, kr.description, ukr.status FROM kyc_requirements_users ukr
        LEFT JOIN kyc_requirements kr ON kr.id = ukr.kyc_requirement_id
        WHERE ukr.user_id = $1
`

type GetManyUserKYCRequirementsRow struct {
	ID          uuid.NullUUID  `json:"id"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	Status      string         `json:"status"`
}

func (q *Queries) GetManyUserKYCRequirements(ctx context.Context, userID uuid.UUID) ([]GetManyUserKYCRequirementsRow, error) {
	rows, err := q.db.QueryContext(ctx, getManyUserKYCRequirements, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetManyUserKYCRequirementsRow{}
	for rows.Next() {
		var i GetManyUserKYCRequirementsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDynamicKYCResults = `-- name: GetUserDynamicKYCResults :many
SELECT id, kyc_requirement_id, field, value, created_at, updated_at FROM dynamic_kyc_results WHERE kyc_requirement_id = $1
`

func (q *Queries) GetUserDynamicKYCResults(ctx context.Context, kycRequirementID uuid.UUID) ([]DynamicKycResult, error) {
	rows, err := q.db.QueryContext(ctx, getUserDynamicKYCResults, kycRequirementID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DynamicKycResult{}
	for rows.Next() {
		var i DynamicKycResult
		if err := rows.Scan(
			&i.ID,
			&i.KycRequirementID,
			&i.Field,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserKYCRequirement = `-- name: GetUserKYCRequirement :one
SELECT id, kyc_requirement_id, user_id, payload, status, created_at FROM kyc_requirements_users WHERE kyc_requirement_id = $1 AND user_id = $2
`

type GetUserKYCRequirementParams struct {
	KycRequirementID uuid.UUID `json:"kyc_requirement_id"`
	UserID           uuid.UUID `json:"user_id"`
}

func (q *Queries) GetUserKYCRequirement(ctx context.Context, arg GetUserKYCRequirementParams) (KycRequirementsUser, error) {
	row := q.db.QueryRowContext(ctx, getUserKYCRequirement, arg.KycRequirementID, arg.UserID)
	var i KycRequirementsUser
	err := row.Scan(
		&i.ID,
		&i.KycRequirementID,
		&i.UserID,
		&i.Payload,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getUserSubmittedKYC = `-- name: GetUserSubmittedKYC :one
SELECT id, kyc_requirement_id, user_id, payload, status, created_at FROM kyc_requirements_users WHERE user_id = $1 AND status = 'submitted' ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetUserSubmittedKYC(ctx context.Context, userID uuid.UUID) (KycRequirementsUser, error) {
	row := q.db.QueryRowContext(ctx, getUserSubmittedKYC, userID)
	var i KycRequirementsUser
	err := row.Scan(
		&i.ID,
		&i.KycRequirementID,
		&i.UserID,
		&i.Payload,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getUserSubmittedKYCRequirement = `-- name: GetUserSubmittedKYCRequirement :one
SELECT id, kyc_requirement_id, user_id, payload, status, created_at FROM kyc_requirements_users WHERE kyc_requirement_id = $1 AND user_id = $2 AND status = 'submitted'
`

type GetUserSubmittedKYCRequirementParams struct {
	KycRequirementID uuid.UUID `json:"kyc_requirement_id"`
	UserID           uuid.UUID `json:"user_id"`
}

func (q *Queries) GetUserSubmittedKYCRequirement(ctx context.Context, arg GetUserSubmittedKYCRequirementParams) (KycRequirementsUser, error) {
	row := q.db.QueryRowContext(ctx, getUserSubmittedKYCRequirement, arg.KycRequirementID, arg.UserID)
	var i KycRequirementsUser
	err := row.Scan(
		&i.ID,
		&i.KycRequirementID,
		&i.UserID,
		&i.Payload,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateKYCRequirement = `-- name: UpdateKYCRequirement :exec
UPDATE kyc_requirements SET
    payload = $1, target = $2, target_id = $3, deadline = $4, title = $5, description = $6
WHERE id = $7
`

type UpdateKYCRequirementParams struct {
	Payload     json.RawMessage `json:"payload"`
	Target      string          `json:"target"`
	TargetID    string          `json:"target_id"`
	Deadline    sql.NullTime    `json:"deadline"`
	Title       string          `json:"title"`
	Description string          `json:"description"`
	ID          uuid.UUID       `json:"id"`
}

func (q *Queries) UpdateKYCRequirement(ctx context.Context, arg UpdateKYCRequirementParams) error {
	_, err := q.db.ExecContext(ctx, updateKYCRequirement,
		arg.Payload,
		arg.Target,
		arg.TargetID,
		arg.Deadline,
		arg.Title,
		arg.Description,
		arg.ID,
	)
	return err
}

const updateUserKYCRequirementStatus = `-- name: UpdateUserKYCRequirementStatus :exec
UPDATE kyc_requirements_users SET status = $1 WHERE id = $2
`

type UpdateUserKYCRequirementStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserKYCRequirementStatus(ctx context.Context, arg UpdateUserKYCRequirementStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserKYCRequirementStatus, arg.Status, arg.ID)
	return err
}
