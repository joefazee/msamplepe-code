// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bank_account_number.sql

package db

import (
	"context"
)

const createBankAccountNumber = `-- name: CreateBankAccountNumber :one
INSERT INTO bank_account_numbers(account_number,
                                 account_name,
                                 currency_code,note) VALUES($1, $2, $3, $4) RETURNING id, account_number, account_name, currency_code, note
`

type CreateBankAccountNumberParams struct {
	AccountNumber string `json:"account_number"`
	AccountName   string `json:"account_name"`
	CurrencyCode  string `json:"currency_code"`
	Note          string `json:"note"`
}

func (q *Queries) CreateBankAccountNumber(ctx context.Context, arg CreateBankAccountNumberParams) (BankAccountNumber, error) {
	row := q.db.QueryRowContext(ctx, createBankAccountNumber,
		arg.AccountNumber,
		arg.AccountName,
		arg.CurrencyCode,
		arg.Note,
	)
	var i BankAccountNumber
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.AccountName,
		&i.CurrencyCode,
		&i.Note,
	)
	return i, err
}

const deleteBankAccountNumber = `-- name: DeleteBankAccountNumber :exec
DELETE FROM bank_account_numbers WHERE id = $1
`

func (q *Queries) DeleteBankAccountNumber(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBankAccountNumber, id)
	return err
}

const getAllBankAccountNumbers = `-- name: GetAllBankAccountNumbers :many
SELECT id, account_number, account_name, currency_code, note FROM bank_account_numbers
`

func (q *Queries) GetAllBankAccountNumbers(ctx context.Context) ([]BankAccountNumber, error) {
	rows, err := q.db.QueryContext(ctx, getAllBankAccountNumbers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BankAccountNumber{}
	for rows.Next() {
		var i BankAccountNumber
		if err := rows.Scan(
			&i.ID,
			&i.AccountNumber,
			&i.AccountName,
			&i.CurrencyCode,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBankAccountNumbersByCurrency = `-- name: GetAllBankAccountNumbersByCurrency :many
SELECT id, account_number, account_name, currency_code, note FROM bank_account_numbers WHERE currency_code = $1
`

func (q *Queries) GetAllBankAccountNumbersByCurrency(ctx context.Context, currencyCode string) ([]BankAccountNumber, error) {
	rows, err := q.db.QueryContext(ctx, getAllBankAccountNumbersByCurrency, currencyCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BankAccountNumber{}
	for rows.Next() {
		var i BankAccountNumber
		if err := rows.Scan(
			&i.ID,
			&i.AccountNumber,
			&i.AccountName,
			&i.CurrencyCode,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
