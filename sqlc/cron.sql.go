// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cron.sql

package db

import (
	"context"
)

const createCronJob = `-- name: CreateCronJob :exec
INSERT INTO jobs (
    key ,minutes
) VALUES ($1, $2)
`

type CreateCronJobParams struct {
	Key     string `json:"key"`
	Minutes int32  `json:"minutes"`
}

func (q *Queries) CreateCronJob(ctx context.Context, arg CreateCronJobParams) error {
	_, err := q.db.ExecContext(ctx, createCronJob, arg.Key, arg.Minutes)
	return err
}

const getCronJob = `-- name: GetCronJob :one
SELECT key, job_id, minutes, last_run_at, enable, description FROM jobs WHERE key = $1
`

func (q *Queries) GetCronJob(ctx context.Context, key string) (Job, error) {
	row := q.db.QueryRowContext(ctx, getCronJob, key)
	var i Job
	err := row.Scan(
		&i.Key,
		&i.JobID,
		&i.Minutes,
		&i.LastRunAt,
		&i.Enable,
		&i.Description,
	)
	return i, err
}

const getCronJobs = `-- name: GetCronJobs :many
SELECT key, job_id, minutes, last_run_at, enable, description FROM jobs
`

func (q *Queries) GetCronJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, getCronJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.Key,
			&i.JobID,
			&i.Minutes,
			&i.LastRunAt,
			&i.Enable,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetAllCrons = `-- name: ResetAllCrons :exec
UPDATE jobs SET enable = false, job_id = ''
`

func (q *Queries) ResetAllCrons(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetAllCrons)
	return err
}

const updateCronJob = `-- name: UpdateCronJob :exec
UPDATE jobs SET enable = $1, minutes = $2, job_id=$3  WHERE key = $4
`

type UpdateCronJobParams struct {
	Enable  bool   `json:"enable"`
	Minutes int32  `json:"minutes"`
	JobID   string `json:"job_id"`
	Key     string `json:"key"`
}

func (q *Queries) UpdateCronJob(ctx context.Context, arg UpdateCronJobParams) error {
	_, err := q.db.ExecContext(ctx, updateCronJob,
		arg.Enable,
		arg.Minutes,
		arg.JobID,
		arg.Key,
	)
	return err
}

const updateCronStatus = `-- name: UpdateCronStatus :exec
UPDATE jobs SET enable = $1 WHERE key = $2
`

type UpdateCronStatusParams struct {
	Enable bool   `json:"enable"`
	Key    string `json:"key"`
}

func (q *Queries) UpdateCronStatus(ctx context.Context, arg UpdateCronStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateCronStatus, arg.Enable, arg.Key)
	return err
}
