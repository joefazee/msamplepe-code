// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (hash, user_id, expiry, scope, provider)
VALUES ($1, $2, $3, $4, $5) RETURNING hash, user_id, expiry, scope, created_at, provider
`

type CreateTokenParams struct {
	Hash     string    `json:"hash"`
	UserID   uuid.UUID `json:"user_id"`
	Expiry   time.Time `json:"expiry"`
	Scope    string    `json:"scope"`
	Provider string    `json:"provider"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
		arg.Provider,
	)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
		&i.CreatedAt,
		&i.Provider,
	)
	return i, err
}

const deleteUserTokens = `-- name: DeleteUserTokens :exec
DELETE FROM tokens
    WHERE scope = $1 AND user_id = $2
`

type DeleteUserTokensParams struct {
	Scope  string    `json:"scope"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteUserTokens(ctx context.Context, arg DeleteUserTokensParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserTokens, arg.Scope, arg.UserID)
	return err
}

const findExistingUserToken = `-- name: FindExistingUserToken :one
SELECT t.hash, t.user_id, t.expiry, t.scope, t.created_at, t.provider
FROM tokens AS t
JOIN users AS u ON t.user_id = u.id
WHERE u.email = $1
  AND t.expiry > NOW() AND t.scope = $2
`

type FindExistingUserTokenParams struct {
	Email string `json:"email"`
	Scope string `json:"scope"`
}

func (q *Queries) FindExistingUserToken(ctx context.Context, arg FindExistingUserTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, findExistingUserToken, arg.Email, arg.Scope)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
		&i.CreatedAt,
		&i.Provider,
	)
	return i, err
}
