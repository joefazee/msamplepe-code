// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: virtual_account.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserVirtualAccountNumber = `-- name: CreateUserVirtualAccountNumber :one
INSERT INTO  virtual_accounts_numbers
    (provider, user_id, wallet_id, account_number, account_name,
     external_id, bank_name, bank_code, bank_slug, currency_code,
     external_wallet_id, network, routing_code_type, routing_code,
     account_number_type, bank_country, bank_city, bank_address,
     bank_post_code
     )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,
        $12, $13, $14, $15, $16, $17, $18, $19) RETURNING id, provider, user_id, wallet_id, account_number, account_name, external_id, bank_name, bank_code, bank_slug, currency_code, created_at, external_wallet_id, network, routing_code_type, routing_code, account_number_type, bank_country, bank_city, bank_address, bank_post_code
`

type CreateUserVirtualAccountNumberParams struct {
	Provider          string    `json:"provider"`
	UserID            uuid.UUID `json:"user_id"`
	WalletID          uuid.UUID `json:"wallet_id"`
	AccountNumber     string    `json:"account_number"`
	AccountName       string    `json:"account_name"`
	ExternalID        string    `json:"external_id"`
	BankName          string    `json:"bank_name"`
	BankCode          string    `json:"bank_code"`
	BankSlug          string    `json:"bank_slug"`
	CurrencyCode      string    `json:"currency_code"`
	ExternalWalletID  string    `json:"external_wallet_id"`
	Network           string    `json:"network"`
	RoutingCodeType   string    `json:"routing_code_type"`
	RoutingCode       string    `json:"routing_code"`
	AccountNumberType string    `json:"account_number_type"`
	BankCountry       string    `json:"bank_country"`
	BankCity          string    `json:"bank_city"`
	BankAddress       string    `json:"bank_address"`
	BankPostCode      string    `json:"bank_post_code"`
}

func (q *Queries) CreateUserVirtualAccountNumber(ctx context.Context, arg CreateUserVirtualAccountNumberParams) (VirtualAccountsNumber, error) {
	row := q.db.QueryRowContext(ctx, createUserVirtualAccountNumber,
		arg.Provider,
		arg.UserID,
		arg.WalletID,
		arg.AccountNumber,
		arg.AccountName,
		arg.ExternalID,
		arg.BankName,
		arg.BankCode,
		arg.BankSlug,
		arg.CurrencyCode,
		arg.ExternalWalletID,
		arg.Network,
		arg.RoutingCodeType,
		arg.RoutingCode,
		arg.AccountNumberType,
		arg.BankCountry,
		arg.BankCity,
		arg.BankAddress,
		arg.BankPostCode,
	)
	var i VirtualAccountsNumber
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.UserID,
		&i.WalletID,
		&i.AccountNumber,
		&i.AccountName,
		&i.ExternalID,
		&i.BankName,
		&i.BankCode,
		&i.BankSlug,
		&i.CurrencyCode,
		&i.CreatedAt,
		&i.ExternalWalletID,
		&i.Network,
		&i.RoutingCodeType,
		&i.RoutingCode,
		&i.AccountNumberType,
		&i.BankCountry,
		&i.BankCity,
		&i.BankAddress,
		&i.BankPostCode,
	)
	return i, err
}

const findUserVirtualAccountNumber = `-- name: FindUserVirtualAccountNumber :one
SELECT id, provider, user_id, wallet_id, account_number, account_name, external_id, bank_name, bank_code, bank_slug, currency_code, created_at, external_wallet_id, network, routing_code_type, routing_code, account_number_type, bank_country, bank_city, bank_address, bank_post_code FROM virtual_accounts_numbers WHERE user_id = $1 AND currency_code = $2 AND provider = $3 LIMIT 1
`

type FindUserVirtualAccountNumberParams struct {
	UserID       uuid.UUID `json:"user_id"`
	CurrencyCode string    `json:"currency_code"`
	Provider     string    `json:"provider"`
}

func (q *Queries) FindUserVirtualAccountNumber(ctx context.Context, arg FindUserVirtualAccountNumberParams) (VirtualAccountsNumber, error) {
	row := q.db.QueryRowContext(ctx, findUserVirtualAccountNumber, arg.UserID, arg.CurrencyCode, arg.Provider)
	var i VirtualAccountsNumber
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.UserID,
		&i.WalletID,
		&i.AccountNumber,
		&i.AccountName,
		&i.ExternalID,
		&i.BankName,
		&i.BankCode,
		&i.BankSlug,
		&i.CurrencyCode,
		&i.CreatedAt,
		&i.ExternalWalletID,
		&i.Network,
		&i.RoutingCodeType,
		&i.RoutingCode,
		&i.AccountNumberType,
		&i.BankCountry,
		&i.BankCity,
		&i.BankAddress,
		&i.BankPostCode,
	)
	return i, err
}

const getUserVirtualAccountByAccountNumber = `-- name: GetUserVirtualAccountByAccountNumber :one
SELECT id, provider, user_id, wallet_id, account_number, account_name, external_id, bank_name, bank_code, bank_slug, currency_code, created_at, external_wallet_id, network, routing_code_type, routing_code, account_number_type, bank_country, bank_city, bank_address, bank_post_code FROM virtual_accounts_numbers WHERE user_id = $1 AND account_number = $2 LIMIT 1
`

type GetUserVirtualAccountByAccountNumberParams struct {
	UserID        uuid.UUID `json:"user_id"`
	AccountNumber string    `json:"account_number"`
}

func (q *Queries) GetUserVirtualAccountByAccountNumber(ctx context.Context, arg GetUserVirtualAccountByAccountNumberParams) (VirtualAccountsNumber, error) {
	row := q.db.QueryRowContext(ctx, getUserVirtualAccountByAccountNumber, arg.UserID, arg.AccountNumber)
	var i VirtualAccountsNumber
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.UserID,
		&i.WalletID,
		&i.AccountNumber,
		&i.AccountName,
		&i.ExternalID,
		&i.BankName,
		&i.BankCode,
		&i.BankSlug,
		&i.CurrencyCode,
		&i.CreatedAt,
		&i.ExternalWalletID,
		&i.Network,
		&i.RoutingCodeType,
		&i.RoutingCode,
		&i.AccountNumberType,
		&i.BankCountry,
		&i.BankCity,
		&i.BankAddress,
		&i.BankPostCode,
	)
	return i, err
}

const getUserVirtualAccountByCurrencyCode = `-- name: GetUserVirtualAccountByCurrencyCode :one
SELECT id, provider, user_id, wallet_id, account_number, account_name, external_id, bank_name, bank_code, bank_slug, currency_code, created_at, external_wallet_id, network, routing_code_type, routing_code, account_number_type, bank_country, bank_city, bank_address, bank_post_code FROM virtual_accounts_numbers WHERE user_id = $1 AND currency_code = $2 LIMIT 1
`

type GetUserVirtualAccountByCurrencyCodeParams struct {
	UserID       uuid.UUID `json:"user_id"`
	CurrencyCode string    `json:"currency_code"`
}

func (q *Queries) GetUserVirtualAccountByCurrencyCode(ctx context.Context, arg GetUserVirtualAccountByCurrencyCodeParams) (VirtualAccountsNumber, error) {
	row := q.db.QueryRowContext(ctx, getUserVirtualAccountByCurrencyCode, arg.UserID, arg.CurrencyCode)
	var i VirtualAccountsNumber
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.UserID,
		&i.WalletID,
		&i.AccountNumber,
		&i.AccountName,
		&i.ExternalID,
		&i.BankName,
		&i.BankCode,
		&i.BankSlug,
		&i.CurrencyCode,
		&i.CreatedAt,
		&i.ExternalWalletID,
		&i.Network,
		&i.RoutingCodeType,
		&i.RoutingCode,
		&i.AccountNumberType,
		&i.BankCountry,
		&i.BankCity,
		&i.BankAddress,
		&i.BankPostCode,
	)
	return i, err
}

const getUserVirtualAccountByProvider = `-- name: GetUserVirtualAccountByProvider :one
SELECT id, provider, user_id, wallet_id, account_number, account_name, external_id, bank_name, bank_code, bank_slug, currency_code, created_at, external_wallet_id, network, routing_code_type, routing_code, account_number_type, bank_country, bank_city, bank_address, bank_post_code FROM virtual_accounts_numbers WHERE user_id = $1 AND provider = $2 LIMIT 1
`

type GetUserVirtualAccountByProviderParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Provider string    `json:"provider"`
}

func (q *Queries) GetUserVirtualAccountByProvider(ctx context.Context, arg GetUserVirtualAccountByProviderParams) (VirtualAccountsNumber, error) {
	row := q.db.QueryRowContext(ctx, getUserVirtualAccountByProvider, arg.UserID, arg.Provider)
	var i VirtualAccountsNumber
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.UserID,
		&i.WalletID,
		&i.AccountNumber,
		&i.AccountName,
		&i.ExternalID,
		&i.BankName,
		&i.BankCode,
		&i.BankSlug,
		&i.CurrencyCode,
		&i.CreatedAt,
		&i.ExternalWalletID,
		&i.Network,
		&i.RoutingCodeType,
		&i.RoutingCode,
		&i.AccountNumberType,
		&i.BankCountry,
		&i.BankCity,
		&i.BankAddress,
		&i.BankPostCode,
	)
	return i, err
}

const getUserVirtualAccountByWalletIDProvider = `-- name: GetUserVirtualAccountByWalletIDProvider :one
SELECT id, provider, user_id, wallet_id, account_number, account_name, external_id, bank_name, bank_code, bank_slug, currency_code, created_at, external_wallet_id, network, routing_code_type, routing_code, account_number_type, bank_country, bank_city, bank_address, bank_post_code FROM virtual_accounts_numbers WHERE user_id = $1 AND wallet_id = $2 AND provider = $3 LIMIT 1
`

type GetUserVirtualAccountByWalletIDProviderParams struct {
	UserID   uuid.UUID `json:"user_id"`
	WalletID uuid.UUID `json:"wallet_id"`
	Provider string    `json:"provider"`
}

func (q *Queries) GetUserVirtualAccountByWalletIDProvider(ctx context.Context, arg GetUserVirtualAccountByWalletIDProviderParams) (VirtualAccountsNumber, error) {
	row := q.db.QueryRowContext(ctx, getUserVirtualAccountByWalletIDProvider, arg.UserID, arg.WalletID, arg.Provider)
	var i VirtualAccountsNumber
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.UserID,
		&i.WalletID,
		&i.AccountNumber,
		&i.AccountName,
		&i.ExternalID,
		&i.BankName,
		&i.BankCode,
		&i.BankSlug,
		&i.CurrencyCode,
		&i.CreatedAt,
		&i.ExternalWalletID,
		&i.Network,
		&i.RoutingCodeType,
		&i.RoutingCode,
		&i.AccountNumberType,
		&i.BankCountry,
		&i.BankCity,
		&i.BankAddress,
		&i.BankPostCode,
	)
	return i, err
}

const getUserVirtualAccounts = `-- name: GetUserVirtualAccounts :many
SELECT id, provider, user_id, wallet_id, account_number, account_name, external_id, bank_name, bank_code, bank_slug, currency_code, created_at, external_wallet_id, network, routing_code_type, routing_code, account_number_type, bank_country, bank_city, bank_address, bank_post_code FROM virtual_accounts_numbers WHERE user_id = $1
`

func (q *Queries) GetUserVirtualAccounts(ctx context.Context, userID uuid.UUID) ([]VirtualAccountsNumber, error) {
	rows, err := q.db.QueryContext(ctx, getUserVirtualAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VirtualAccountsNumber{}
	for rows.Next() {
		var i VirtualAccountsNumber
		if err := rows.Scan(
			&i.ID,
			&i.Provider,
			&i.UserID,
			&i.WalletID,
			&i.AccountNumber,
			&i.AccountName,
			&i.ExternalID,
			&i.BankName,
			&i.BankCode,
			&i.BankSlug,
			&i.CurrencyCode,
			&i.CreatedAt,
			&i.ExternalWalletID,
			&i.Network,
			&i.RoutingCodeType,
			&i.RoutingCode,
			&i.AccountNumberType,
			&i.BankCountry,
			&i.BankCity,
			&i.BankAddress,
			&i.BankPostCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVirtualAccountNumberByProvider = `-- name: GetVirtualAccountNumberByProvider :one
SELECT id, provider, user_id, wallet_id, account_number, account_name, external_id, bank_name, bank_code, bank_slug, currency_code, created_at, external_wallet_id, network, routing_code_type, routing_code, account_number_type, bank_country, bank_city, bank_address, bank_post_code FROM virtual_accounts_numbers WHERE provider = $1 AND  account_number = $2 LIMIT 1
`

type GetVirtualAccountNumberByProviderParams struct {
	Provider      string `json:"provider"`
	AccountNumber string `json:"account_number"`
}

func (q *Queries) GetVirtualAccountNumberByProvider(ctx context.Context, arg GetVirtualAccountNumberByProviderParams) (VirtualAccountsNumber, error) {
	row := q.db.QueryRowContext(ctx, getVirtualAccountNumberByProvider, arg.Provider, arg.AccountNumber)
	var i VirtualAccountsNumber
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.UserID,
		&i.WalletID,
		&i.AccountNumber,
		&i.AccountName,
		&i.ExternalID,
		&i.BankName,
		&i.BankCode,
		&i.BankSlug,
		&i.CurrencyCode,
		&i.CreatedAt,
		&i.ExternalWalletID,
		&i.Network,
		&i.RoutingCodeType,
		&i.RoutingCode,
		&i.AccountNumberType,
		&i.BankCountry,
		&i.BankCity,
		&i.BankAddress,
		&i.BankPostCode,
	)
	return i, err
}
