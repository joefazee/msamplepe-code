// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: veriff_webook.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createVeriffWebhook = `-- name: CreateVeriffWebhook :one
INSERT INTO veriff_webhook (session_id, payload, payload_type, payload_structure, scope) VALUES ($1, $2, $3, $4, $5) RETURNING id, payload, payload_type, status, created_at, updated_at, session_id, payload_structure, scope
`

type CreateVeriffWebhookParams struct {
	SessionID        string          `json:"session_id"`
	Payload          json.RawMessage `json:"payload"`
	PayloadType      string          `json:"payload_type"`
	PayloadStructure string          `json:"payload_structure"`
	Scope            string          `json:"scope"`
}

func (q *Queries) CreateVeriffWebhook(ctx context.Context, arg CreateVeriffWebhookParams) (VeriffWebhook, error) {
	row := q.db.QueryRowContext(ctx, createVeriffWebhook,
		arg.SessionID,
		arg.Payload,
		arg.PayloadType,
		arg.PayloadStructure,
		arg.Scope,
	)
	var i VeriffWebhook
	err := row.Scan(
		&i.ID,
		&i.Payload,
		&i.PayloadType,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SessionID,
		&i.PayloadStructure,
		&i.Scope,
	)
	return i, err
}

const getVeriffWebhookBySessionId = `-- name: GetVeriffWebhookBySessionId :one
SELECT id, payload, payload_type, status, created_at, updated_at, session_id, payload_structure, scope FROM veriff_webhook WHERE session_id = $1 AND payload_type = $2 AND status = 'pending' LIMIT 1
`

type GetVeriffWebhookBySessionIdParams struct {
	SessionID   string `json:"session_id"`
	PayloadType string `json:"payload_type"`
}

func (q *Queries) GetVeriffWebhookBySessionId(ctx context.Context, arg GetVeriffWebhookBySessionIdParams) (VeriffWebhook, error) {
	row := q.db.QueryRowContext(ctx, getVeriffWebhookBySessionId, arg.SessionID, arg.PayloadType)
	var i VeriffWebhook
	err := row.Scan(
		&i.ID,
		&i.Payload,
		&i.PayloadType,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SessionID,
		&i.PayloadStructure,
		&i.Scope,
	)
	return i, err
}

const updateVeriffWebhookStatus = `-- name: UpdateVeriffWebhookStatus :one
UPDATE veriff_webhook SET status = $1 WHERE session_id = $2 AND payload_type = $3 AND id = $4 RETURNING id, payload, payload_type, status, created_at, updated_at, session_id, payload_structure, scope
`

type UpdateVeriffWebhookStatusParams struct {
	Status      string    `json:"status"`
	SessionID   string    `json:"session_id"`
	PayloadType string    `json:"payload_type"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateVeriffWebhookStatus(ctx context.Context, arg UpdateVeriffWebhookStatusParams) (VeriffWebhook, error) {
	row := q.db.QueryRowContext(ctx, updateVeriffWebhookStatus,
		arg.Status,
		arg.SessionID,
		arg.PayloadType,
		arg.ID,
	)
	var i VeriffWebhook
	err := row.Scan(
		&i.ID,
		&i.Payload,
		&i.PayloadType,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SessionID,
		&i.PayloadStructure,
		&i.Scope,
	)
	return i, err
}
