// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: identity_verification_daa.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUserVerificationDataByProvider = `-- name: GetUserVerificationDataByProvider :one
SELECT id, user_id, created_at, updated_at, gender, address, city, house_no, last_name, first_name, date_of_birth, document_type, document_number, document_country, document_valid_from, document_valid_until, provider, scope FROM identity_verification_data WHERE user_id = $1 AND provider = $2 LIMIT 1
`

type GetUserVerificationDataByProviderParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Provider string    `json:"provider"`
}

func (q *Queries) GetUserVerificationDataByProvider(ctx context.Context, arg GetUserVerificationDataByProviderParams) (IdentityVerificationDatum, error) {
	row := q.db.QueryRowContext(ctx, getUserVerificationDataByProvider, arg.UserID, arg.Provider)
	var i IdentityVerificationDatum
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gender,
		&i.Address,
		&i.City,
		&i.HouseNo,
		&i.LastName,
		&i.FirstName,
		&i.DateOfBirth,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.DocumentCountry,
		&i.DocumentValidFrom,
		&i.DocumentValidUntil,
		&i.Provider,
		&i.Scope,
	)
	return i, err
}

const insertUserIdentityVerificationData = `-- name: InsertUserIdentityVerificationData :one
INSERT INTO identity_verification_data
    (
     user_id, gender, address, city, house_no, last_name,
     first_name, date_of_birth, document_type, document_number,
     document_country, document_valid_from, document_valid_until, provider, scope
    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) RETURNING id, user_id, created_at, updated_at, gender, address, city, house_no, last_name, first_name, date_of_birth, document_type, document_number, document_country, document_valid_from, document_valid_until, provider, scope
`

type InsertUserIdentityVerificationDataParams struct {
	UserID             uuid.UUID      `json:"user_id"`
	Gender             sql.NullString `json:"gender"`
	Address            sql.NullString `json:"address"`
	City               sql.NullString `json:"city"`
	HouseNo            sql.NullString `json:"house_no"`
	LastName           sql.NullString `json:"last_name"`
	FirstName          sql.NullString `json:"first_name"`
	DateOfBirth        sql.NullTime   `json:"date_of_birth"`
	DocumentType       sql.NullString `json:"document_type"`
	DocumentNumber     sql.NullString `json:"document_number"`
	DocumentCountry    sql.NullString `json:"document_country"`
	DocumentValidFrom  sql.NullTime   `json:"document_valid_from"`
	DocumentValidUntil sql.NullTime   `json:"document_valid_until"`
	Provider           string         `json:"provider"`
	Scope              string         `json:"scope"`
}

func (q *Queries) InsertUserIdentityVerificationData(ctx context.Context, arg InsertUserIdentityVerificationDataParams) (IdentityVerificationDatum, error) {
	row := q.db.QueryRowContext(ctx, insertUserIdentityVerificationData,
		arg.UserID,
		arg.Gender,
		arg.Address,
		arg.City,
		arg.HouseNo,
		arg.LastName,
		arg.FirstName,
		arg.DateOfBirth,
		arg.DocumentType,
		arg.DocumentNumber,
		arg.DocumentCountry,
		arg.DocumentValidFrom,
		arg.DocumentValidUntil,
		arg.Provider,
		arg.Scope,
	)
	var i IdentityVerificationDatum
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gender,
		&i.Address,
		&i.City,
		&i.HouseNo,
		&i.LastName,
		&i.FirstName,
		&i.DateOfBirth,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.DocumentCountry,
		&i.DocumentValidFrom,
		&i.DocumentValidUntil,
		&i.Provider,
		&i.Scope,
	)
	return i, err
}

const updateUserIdentityVerificationData = `-- name: UpdateUserIdentityVerificationData :one
UPDATE identity_verification_data
    SET gender = COALESCE($1, gender),
        address = COALESCE($2, address),
        city = COALESCE($3, city),
        house_no = COALESCE($4, house_no),
        last_name = COALESCE($5, last_name),
        first_name = COALESCE($6, first_name),
        date_of_birth = COALESCE($7, date_of_birth),
        document_type = COALESCE($8, document_type),
        document_number = COALESCE($9, document_number),
        document_country = COALESCE($10, document_country),
        document_valid_from = COALESCE($11, document_valid_from),
        document_valid_until = COALESCE($12, document_valid_until),
        provider = COALESCE($13, provider),
        scope = COALESCE($14, scope),
        updated_at = now()
    WHERE id = $15 RETURNING id, user_id, created_at, updated_at, gender, address, city, house_no, last_name, first_name, date_of_birth, document_type, document_number, document_country, document_valid_from, document_valid_until, provider, scope
`

type UpdateUserIdentityVerificationDataParams struct {
	Gender             sql.NullString `json:"gender"`
	Address            sql.NullString `json:"address"`
	City               sql.NullString `json:"city"`
	HouseNo            sql.NullString `json:"house_no"`
	LastName           sql.NullString `json:"last_name"`
	FirstName          sql.NullString `json:"first_name"`
	DateOfBirth        sql.NullTime   `json:"date_of_birth"`
	DocumentType       sql.NullString `json:"document_type"`
	DocumentNumber     sql.NullString `json:"document_number"`
	DocumentCountry    sql.NullString `json:"document_country"`
	DocumentValidFrom  sql.NullTime   `json:"document_valid_from"`
	DocumentValidUntil sql.NullTime   `json:"document_valid_until"`
	Provider           sql.NullString `json:"provider"`
	Scope              sql.NullString `json:"scope"`
	ID                 int64          `json:"id"`
}

func (q *Queries) UpdateUserIdentityVerificationData(ctx context.Context, arg UpdateUserIdentityVerificationDataParams) (IdentityVerificationDatum, error) {
	row := q.db.QueryRowContext(ctx, updateUserIdentityVerificationData,
		arg.Gender,
		arg.Address,
		arg.City,
		arg.HouseNo,
		arg.LastName,
		arg.FirstName,
		arg.DateOfBirth,
		arg.DocumentType,
		arg.DocumentNumber,
		arg.DocumentCountry,
		arg.DocumentValidFrom,
		arg.DocumentValidUntil,
		arg.Provider,
		arg.Scope,
		arg.ID,
	)
	var i IdentityVerificationDatum
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gender,
		&i.Address,
		&i.City,
		&i.HouseNo,
		&i.LastName,
		&i.FirstName,
		&i.DateOfBirth,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.DocumentCountry,
		&i.DocumentValidFrom,
		&i.DocumentValidUntil,
		&i.Provider,
		&i.Scope,
	)
	return i, err
}
