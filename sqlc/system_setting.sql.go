// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: system_setting.sql

package db

import (
	"context"
)

const getSystemSettings = `-- name: GetSystemSettings :many
SELECT config_key, config_value, created_at, updated_at FROM system_configurations
`

func (q *Queries) GetSystemSettings(ctx context.Context) ([]SystemConfiguration, error) {
	rows, err := q.db.QueryContext(ctx, getSystemSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SystemConfiguration{}
	for rows.Next() {
		var i SystemConfiguration
		if err := rows.Scan(
			&i.ConfigKey,
			&i.ConfigValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSystemSetting = `-- name: UpdateSystemSetting :one
UPDATE system_configurations SET config_value = $1 WHERE  config_key = $2 RETURNING config_key, config_value, created_at, updated_at
`

type UpdateSystemSettingParams struct {
	ConfigValue string `json:"config_value"`
	ConfigKey   string `json:"config_key"`
}

func (q *Queries) UpdateSystemSetting(ctx context.Context, arg UpdateSystemSettingParams) (SystemConfiguration, error) {
	row := q.db.QueryRowContext(ctx, updateSystemSetting, arg.ConfigValue, arg.ConfigKey)
	var i SystemConfiguration
	err := row.Scan(
		&i.ConfigKey,
		&i.ConfigValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
