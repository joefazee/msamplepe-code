// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: document.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (
   user_id,
   model,
   model_id,
   document_type,
   document_number,
   document_path,
   bucket,
   storage
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at
`

type CreateDocumentParams struct {
	UserID         uuid.UUID `json:"user_id"`
	Model          string    `json:"model"`
	ModelID        uuid.UUID `json:"model_id"`
	DocumentType   string    `json:"document_type"`
	DocumentNumber string    `json:"document_number"`
	DocumentPath   string    `json:"document_path"`
	Bucket         string    `json:"bucket"`
	Storage        string    `json:"storage"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, createDocument,
		arg.UserID,
		arg.Model,
		arg.ModelID,
		arg.DocumentType,
		arg.DocumentNumber,
		arg.DocumentPath,
		arg.Bucket,
		arg.Storage,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.ModelID,
		&i.UserID,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.Bucket,
		&i.DocumentPath,
		&i.Storage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDocument = `-- name: DeleteDocument :exec
DELETE FROM documents WHERE id = $1
`

func (q *Queries) DeleteDocument(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDocument, id)
	return err
}

const deleteUserDocument = `-- name: DeleteUserDocument :exec
DELETE FROM documents WHERE id = $1 AND user_id = $2
`

type DeleteUserDocumentParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteUserDocument(ctx context.Context, arg DeleteUserDocumentParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserDocument, arg.ID, arg.UserID)
	return err
}

const getDocumentByModel = `-- name: GetDocumentByModel :one
SELECT id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at FROM documents WHERE model = $1 AND model_id = $2 LIMIT 1
`

type GetDocumentByModelParams struct {
	Model   string    `json:"model"`
	ModelID uuid.UUID `json:"model_id"`
}

func (q *Queries) GetDocumentByModel(ctx context.Context, arg GetDocumentByModelParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, getDocumentByModel, arg.Model, arg.ModelID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.ModelID,
		&i.UserID,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.Bucket,
		&i.DocumentPath,
		&i.Storage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDocumentsByModel = `-- name: GetDocumentsByModel :many
SELECT id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at FROM documents WHERE model = $1 AND model_id = $2
`

type GetDocumentsByModelParams struct {
	Model   string    `json:"model"`
	ModelID uuid.UUID `json:"model_id"`
}

func (q *Queries) GetDocumentsByModel(ctx context.Context, arg GetDocumentsByModelParams) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsByModel, arg.Model, arg.ModelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.ModelID,
			&i.UserID,
			&i.DocumentType,
			&i.DocumentNumber,
			&i.Bucket,
			&i.DocumentPath,
			&i.Storage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKYCDocuments = `-- name: GetKYCDocuments :many
SELECT id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at FROM documents WHERE model = 'dynamic_kyc_result'
    AND document_type = 'kyc' AND model_id =  $1
`

func (q *Queries) GetKYCDocuments(ctx context.Context, modelID uuid.UUID) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, getKYCDocuments, modelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.ModelID,
			&i.UserID,
			&i.DocumentType,
			&i.DocumentNumber,
			&i.Bucket,
			&i.DocumentPath,
			&i.Storage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneDocumentByID = `-- name: GetOneDocumentByID :one
SELECT id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at FROM documents WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOneDocumentByID(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRowContext(ctx, getOneDocumentByID, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.ModelID,
		&i.UserID,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.Bucket,
		&i.DocumentPath,
		&i.Storage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOneDocumentByModel = `-- name: GetOneDocumentByModel :one
SELECT id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at FROM documents WHERE model = $1 AND model_id = $2 LIMIT 1
`

type GetOneDocumentByModelParams struct {
	Model   string    `json:"model"`
	ModelID uuid.UUID `json:"model_id"`
}

func (q *Queries) GetOneDocumentByModel(ctx context.Context, arg GetOneDocumentByModelParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, getOneDocumentByModel, arg.Model, arg.ModelID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.ModelID,
		&i.UserID,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.Bucket,
		&i.DocumentPath,
		&i.Storage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserDocument = `-- name: GetUserDocument :one
SELECT id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at FROM documents WHERE user_id = $1 AND model = $2 AND model_id = $3 LIMIT 1
`

type GetUserDocumentParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Model   string    `json:"model"`
	ModelID uuid.UUID `json:"model_id"`
}

func (q *Queries) GetUserDocument(ctx context.Context, arg GetUserDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, getUserDocument, arg.UserID, arg.Model, arg.ModelID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.ModelID,
		&i.UserID,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.Bucket,
		&i.DocumentPath,
		&i.Storage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIDVDocsByType = `-- name: GetUserIDVDocsByType :many
SELECT id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at FROM documents WHERE model = 'identity_verification'
                          AND model_id =  $1 AND document_type = $2
`

type GetUserIDVDocsByTypeParams struct {
	ModelID      uuid.UUID `json:"model_id"`
	DocumentType string    `json:"document_type"`
}

func (q *Queries) GetUserIDVDocsByType(ctx context.Context, arg GetUserIDVDocsByTypeParams) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, getUserIDVDocsByType, arg.ModelID, arg.DocumentType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.ModelID,
			&i.UserID,
			&i.DocumentType,
			&i.DocumentNumber,
			&i.Bucket,
			&i.DocumentPath,
			&i.Storage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserIdentityVerificationDocuments = `-- name: GetUserIdentityVerificationDocuments :many
SELECT id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at FROM documents WHERE model = 'identity_verification'
    AND model_id =  $1
`

func (q *Queries) GetUserIdentityVerificationDocuments(ctx context.Context, modelID uuid.UUID) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, getUserIdentityVerificationDocuments, modelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.ModelID,
			&i.UserID,
			&i.DocumentType,
			&i.DocumentNumber,
			&i.Bucket,
			&i.DocumentPath,
			&i.Storage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocument = `-- name: UpdateDocument :one
UPDATE documents
SET model = COALESCE($1, model),
    model_id = COALESCE($2, model_id),
    user_id = COALESCE($3, user_id),
   document_type = COALESCE($4, document_type),
   document_number = COALESCE($5, document_number),
   document_path = COALESCE($6, document_path),
   bucket = COALESCE($7, bucket),
   storage = COALESCE($8, storage)
WHERE id = $9 RETURNING id, model, model_id, user_id, document_type, document_number, bucket, document_path, storage, created_at, updated_at
`

type UpdateDocumentParams struct {
	Model          sql.NullString `json:"model"`
	ModelID        uuid.NullUUID  `json:"model_id"`
	UserID         uuid.NullUUID  `json:"user_id"`
	DocumentType   sql.NullString `json:"document_type"`
	DocumentNumber sql.NullString `json:"document_number"`
	DocumentPath   sql.NullString `json:"document_path"`
	Bucket         sql.NullString `json:"bucket"`
	Storage        sql.NullString `json:"storage"`
	ID             uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, updateDocument,
		arg.Model,
		arg.ModelID,
		arg.UserID,
		arg.DocumentType,
		arg.DocumentNumber,
		arg.DocumentPath,
		arg.Bucket,
		arg.Storage,
		arg.ID,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.ModelID,
		&i.UserID,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.Bucket,
		&i.DocumentPath,
		&i.Storage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
