// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: settlement.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createSettlement = `-- name: CreateSettlement :one
INSERT INTO settlements (transaction_id, amount, source, status, executed_by, payload)
    VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, transaction_id, amount, source, status, created_at, updated_at, executed_by, payload
`

type CreateSettlementParams struct {
	TransactionID uuid.UUID       `json:"transaction_id"`
	Amount        decimal.Decimal `json:"amount"`
	Source        string          `json:"source"`
	Status        string          `json:"status"`
	ExecutedBy    uuid.UUID       `json:"executed_by"`
	Payload       json.RawMessage `json:"payload"`
}

func (q *Queries) CreateSettlement(ctx context.Context, arg CreateSettlementParams) (Settlement, error) {
	row := q.db.QueryRowContext(ctx, createSettlement,
		arg.TransactionID,
		arg.Amount,
		arg.Source,
		arg.Status,
		arg.ExecutedBy,
		arg.Payload,
	)
	var i Settlement
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.Amount,
		&i.Source,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExecutedBy,
		&i.Payload,
	)
	return i, err
}

const getOTPPendingSettlementByProvider = `-- name: GetOTPPendingSettlementByProvider :one
SELECT id, transaction_id, amount, source, status, created_at, updated_at, executed_by, payload FROM settlements WHERE id = $1 AND status = 'pending_otp' AND source = $2 LIMIT  1
`

type GetOTPPendingSettlementByProviderParams struct {
	ID     uuid.UUID `json:"id"`
	Source string    `json:"source"`
}

func (q *Queries) GetOTPPendingSettlementByProvider(ctx context.Context, arg GetOTPPendingSettlementByProviderParams) (Settlement, error) {
	row := q.db.QueryRowContext(ctx, getOTPPendingSettlementByProvider, arg.ID, arg.Source)
	var i Settlement
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.Amount,
		&i.Source,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExecutedBy,
		&i.Payload,
	)
	return i, err
}

const getSettlement = `-- name: GetSettlement :one
SELECT id, transaction_id, amount, source, status, created_at, updated_at, executed_by, payload FROM settlements WHERE id = $1 LIMIT  1
`

func (q *Queries) GetSettlement(ctx context.Context, id uuid.UUID) (Settlement, error) {
	row := q.db.QueryRowContext(ctx, getSettlement, id)
	var i Settlement
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.Amount,
		&i.Source,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExecutedBy,
		&i.Payload,
	)
	return i, err
}

const getTransactionSettlements = `-- name: GetTransactionSettlements :many
SELECT id, transaction_id, amount, source, status, created_at, updated_at, executed_by, payload FROM settlements WHERE transaction_id = $1 AND status = $2 ORDER BY id ASC
`

type GetTransactionSettlementsParams struct {
	TransactionID uuid.UUID `json:"transaction_id"`
	Status        string    `json:"status"`
}

func (q *Queries) GetTransactionSettlements(ctx context.Context, arg GetTransactionSettlementsParams) ([]Settlement, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionSettlements, arg.TransactionID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Settlement{}
	for rows.Next() {
		var i Settlement
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.Amount,
			&i.Source,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExecutedBy,
			&i.Payload,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionTotalSettlement = `-- name: GetTransactionTotalSettlement :one
SELECT CAST(COALESCE(SUM(amount), 0) AS NUMERIC) FROM settlements WHERE transaction_id = $1 and status = 'settled'
`

func (q *Queries) GetTransactionTotalSettlement(ctx context.Context, transactionID uuid.UUID) (decimal.Decimal, error) {
	row := q.db.QueryRowContext(ctx, getTransactionTotalSettlement, transactionID)
	var column_1 decimal.Decimal
	err := row.Scan(&column_1)
	return column_1, err
}

const updateSettlementStatus = `-- name: UpdateSettlementStatus :one
UPDATE settlements SET status = $2, updated_at = now() WHERE id = $1 RETURNING id, transaction_id, amount, source, status, created_at, updated_at, executed_by, payload
`

type UpdateSettlementStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateSettlementStatus(ctx context.Context, arg UpdateSettlementStatusParams) (Settlement, error) {
	row := q.db.QueryRowContext(ctx, updateSettlementStatus, arg.ID, arg.Status)
	var i Settlement
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.Amount,
		&i.Source,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExecutedBy,
		&i.Payload,
	)
	return i, err
}
