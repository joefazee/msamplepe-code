// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: affiliate_merchant.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAffiliateMerchant = `-- name: CreateAffiliateMerchant :one
INSERT INTO affiliate_merchants (email, api_key)
    VALUES ($1, $2) RETURNING id, api_key, email, created_at, updated_at, webhook_url, webhook_secret
`

type CreateAffiliateMerchantParams struct {
	Email  string `json:"email"`
	ApiKey string `json:"api_key"`
}

func (q *Queries) CreateAffiliateMerchant(ctx context.Context, arg CreateAffiliateMerchantParams) (AffiliateMerchant, error) {
	row := q.db.QueryRowContext(ctx, createAffiliateMerchant, arg.Email, arg.ApiKey)
	var i AffiliateMerchant
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WebhookUrl,
		&i.WebhookSecret,
	)
	return i, err
}

const getAffiliateMerchantByAPIKey = `-- name: GetAffiliateMerchantByAPIKey :one
SELECT id, api_key, email, created_at, updated_at, webhook_url, webhook_secret FROM affiliate_merchants WHERE api_key = $1 LIMIT 1
`

func (q *Queries) GetAffiliateMerchantByAPIKey(ctx context.Context, apiKey string) (AffiliateMerchant, error) {
	row := q.db.QueryRowContext(ctx, getAffiliateMerchantByAPIKey, apiKey)
	var i AffiliateMerchant
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WebhookUrl,
		&i.WebhookSecret,
	)
	return i, err
}

const getAffiliateMerchantByEmail = `-- name: GetAffiliateMerchantByEmail :one
SELECT id, api_key, email, created_at, updated_at, webhook_url, webhook_secret FROM affiliate_merchants WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAffiliateMerchantByEmail(ctx context.Context, email string) (AffiliateMerchant, error) {
	row := q.db.QueryRowContext(ctx, getAffiliateMerchantByEmail, email)
	var i AffiliateMerchant
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WebhookUrl,
		&i.WebhookSecret,
	)
	return i, err
}

const getAffiliateMerchantByID = `-- name: GetAffiliateMerchantByID :one
SELECT id, api_key, email, created_at, updated_at, webhook_url, webhook_secret FROM affiliate_merchants WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAffiliateMerchantByID(ctx context.Context, id uuid.UUID) (AffiliateMerchant, error) {
	row := q.db.QueryRowContext(ctx, getAffiliateMerchantByID, id)
	var i AffiliateMerchant
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WebhookUrl,
		&i.WebhookSecret,
	)
	return i, err
}

const updateAffiliateMerchantAPIKey = `-- name: UpdateAffiliateMerchantAPIKey :one
UPDATE affiliate_merchants SET api_key = $1 WHERE email = $2 RETURNING id, api_key, email, created_at, updated_at, webhook_url, webhook_secret
`

type UpdateAffiliateMerchantAPIKeyParams struct {
	ApiKey string `json:"api_key"`
	Email  string `json:"email"`
}

func (q *Queries) UpdateAffiliateMerchantAPIKey(ctx context.Context, arg UpdateAffiliateMerchantAPIKeyParams) (AffiliateMerchant, error) {
	row := q.db.QueryRowContext(ctx, updateAffiliateMerchantAPIKey, arg.ApiKey, arg.Email)
	var i AffiliateMerchant
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WebhookUrl,
		&i.WebhookSecret,
	)
	return i, err
}

const updateAffiliateMerchantWebhookData = `-- name: UpdateAffiliateMerchantWebhookData :one
UPDATE affiliate_merchants SET webhook_url = $1, webhook_secret = $2 WHERE email = $3 RETURNING id, api_key, email, created_at, updated_at, webhook_url, webhook_secret
`

type UpdateAffiliateMerchantWebhookDataParams struct {
	WebhookUrl    string `json:"webhook_url"`
	WebhookSecret string `json:"webhook_secret"`
	Email         string `json:"email"`
}

func (q *Queries) UpdateAffiliateMerchantWebhookData(ctx context.Context, arg UpdateAffiliateMerchantWebhookDataParams) (AffiliateMerchant, error) {
	row := q.db.QueryRowContext(ctx, updateAffiliateMerchantWebhookData, arg.WebhookUrl, arg.WebhookSecret, arg.Email)
	var i AffiliateMerchant
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WebhookUrl,
		&i.WebhookSecret,
	)
	return i, err
}
