// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: recipient.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createRecipient = `-- name: CreateRecipient :one
INSERT INTO recipients (
        user_id,
        scheme,
        currency,
        data
        )
 VALUES ($1, $2, $3, $4) RETURNING id, user_id, scheme, currency, data, created_at, updated_at
`

type CreateRecipientParams struct {
	UserID   uuid.UUID       `json:"user_id"`
	Scheme   string          `json:"scheme"`
	Currency string          `json:"currency"`
	Data     json.RawMessage `json:"data"`
}

func (q *Queries) CreateRecipient(ctx context.Context, arg CreateRecipientParams) (Recipient, error) {
	row := q.db.QueryRowContext(ctx, createRecipient,
		arg.UserID,
		arg.Scheme,
		arg.Currency,
		arg.Data,
	)
	var i Recipient
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Scheme,
		&i.Currency,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserRecipient = `-- name: DeleteUserRecipient :exec
DELETE FROM recipients WHERE user_id = $1 AND id = $2
`

type DeleteUserRecipientParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) DeleteUserRecipient(ctx context.Context, arg DeleteUserRecipientParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserRecipient, arg.UserID, arg.ID)
	return err
}

const deleteUserRecipients = `-- name: DeleteUserRecipients :exec
DELETE FROM recipients WHERE user_id = $1
`

func (q *Queries) DeleteUserRecipients(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserRecipients, userID)
	return err
}

const getUserRecipient = `-- name: GetUserRecipient :one
SELECT id, user_id, scheme, currency, data, created_at, updated_at FROM recipients WHERE user_id = $1 AND id = $2
`

type GetUserRecipientParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) GetUserRecipient(ctx context.Context, arg GetUserRecipientParams) (Recipient, error) {
	row := q.db.QueryRowContext(ctx, getUserRecipient, arg.UserID, arg.ID)
	var i Recipient
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Scheme,
		&i.Currency,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRecipient = `-- name: UpdateRecipient :one
UPDATE recipients SET
        scheme = $3,
        currency = $4,
        data = $5
 WHERE user_id = $1 AND id = $2 RETURNING id, user_id, scheme, currency, data, created_at, updated_at
`

type UpdateRecipientParams struct {
	UserID   uuid.UUID       `json:"user_id"`
	ID       uuid.UUID       `json:"id"`
	Scheme   string          `json:"scheme"`
	Currency string          `json:"currency"`
	Data     json.RawMessage `json:"data"`
}

func (q *Queries) UpdateRecipient(ctx context.Context, arg UpdateRecipientParams) (Recipient, error) {
	row := q.db.QueryRowContext(ctx, updateRecipient,
		arg.UserID,
		arg.ID,
		arg.Scheme,
		arg.Currency,
		arg.Data,
	)
	var i Recipient
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Scheme,
		&i.Currency,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
