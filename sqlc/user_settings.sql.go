// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user_settings.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserSetting = `-- name: CreateUserSetting :exec
INSERT INTO user_settings (user_id, key, value) VALUES ($1, $2, $3)
`

type CreateUserSettingParams struct {
	UserID uuid.UUID `json:"user_id"`
	Key    string    `json:"key"`
	Value  string    `json:"value"`
}

func (q *Queries) CreateUserSetting(ctx context.Context, arg CreateUserSettingParams) error {
	_, err := q.db.ExecContext(ctx, createUserSetting, arg.UserID, arg.Key, arg.Value)
	return err
}

const updateUserSetting = `-- name: UpdateUserSetting :exec
UPDATE user_settings SET value = $3 WHERE user_id = $1 AND key = $2
`

type UpdateUserSettingParams struct {
	UserID uuid.UUID `json:"user_id"`
	Key    string    `json:"key"`
	Value  string    `json:"value"`
}

func (q *Queries) UpdateUserSetting(ctx context.Context, arg UpdateUserSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSetting, arg.UserID, arg.Key, arg.Value)
	return err
}

const upsertUserSetting = `-- name: UpsertUserSetting :exec
INSERT INTO user_settings (user_id, key, value, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
ON CONFLICT (user_id, key)
    DO UPDATE SET value = $3, updated_at = NOW()
`

type UpsertUserSettingParams struct {
	UserID uuid.UUID `json:"user_id"`
	Key    string    `json:"key"`
	Value  string    `json:"value"`
}

func (q *Queries) UpsertUserSetting(ctx context.Context, arg UpsertUserSettingParams) error {
	_, err := q.db.ExecContext(ctx, upsertUserSetting, arg.UserID, arg.Key, arg.Value)
	return err
}
