// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: currency_settings.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCurrencySettingSystem = `-- name: CreateCurrencySettingSystem :one
INSERT INTO currency_configurations_system (
    config_key,
    config_value,
    currency_id
) VALUES ($1, $2, $3) RETURNING id, config_key, config_value, currency_id, created_at, updated_at
`

type CreateCurrencySettingSystemParams struct {
	ConfigKey   string `json:"config_key"`
	ConfigValue string `json:"config_value"`
	CurrencyID  int32  `json:"currency_id"`
}

func (q *Queries) CreateCurrencySettingSystem(ctx context.Context, arg CreateCurrencySettingSystemParams) (CurrencyConfigurationsSystem, error) {
	row := q.db.QueryRowContext(ctx, createCurrencySettingSystem, arg.ConfigKey, arg.ConfigValue, arg.CurrencyID)
	var i CurrencyConfigurationsSystem
	err := row.Scan(
		&i.ID,
		&i.ConfigKey,
		&i.ConfigValue,
		&i.CurrencyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCurrencySettingUser = `-- name: CreateCurrencySettingUser :one
INSERT INTO currency_configurations_user (
    user_id,
    config_key,
    config_value,
    currency_id
) VALUES ($1, $2, $3, $4) RETURNING id, config_key, config_value, currency_id, user_id, created_at, updated_at
`

type CreateCurrencySettingUserParams struct {
	UserID      uuid.UUID `json:"user_id"`
	ConfigKey   string    `json:"config_key"`
	ConfigValue string    `json:"config_value"`
	CurrencyID  int32     `json:"currency_id"`
}

func (q *Queries) CreateCurrencySettingUser(ctx context.Context, arg CreateCurrencySettingUserParams) (CurrencyConfigurationsUser, error) {
	row := q.db.QueryRowContext(ctx, createCurrencySettingUser,
		arg.UserID,
		arg.ConfigKey,
		arg.ConfigValue,
		arg.CurrencyID,
	)
	var i CurrencyConfigurationsUser
	err := row.Scan(
		&i.ID,
		&i.ConfigKey,
		&i.ConfigValue,
		&i.CurrencyID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllCurrencySettingUser = `-- name: DeleteAllCurrencySettingUser :exec
DELETE FROM currency_configurations_user WHERE  currency_id = $1 AND user_id = $2
`

type DeleteAllCurrencySettingUserParams struct {
	CurrencyID int32     `json:"currency_id"`
	UserID     uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteAllCurrencySettingUser(ctx context.Context, arg DeleteAllCurrencySettingUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteAllCurrencySettingUser, arg.CurrencyID, arg.UserID)
	return err
}

const getCurrencySetting = `-- name: GetCurrencySetting :many
SELECT
    COALESCE(uc.config_key, sc.config_key) as config_key,
    COALESCE(uc.config_value, sc.config_value) as config_value
FROM
    currency_configurations_system sc
        LEFT JOIN
    currency_configurations_user uc ON sc.config_key = uc.config_key
        AND uc.currency_id = $1
        AND uc.user_id = $2
WHERE
        sc.currency_id = $1
`

type GetCurrencySettingParams struct {
	CurrencyID int32     `json:"currency_id"`
	UserID     uuid.UUID `json:"user_id"`
}

type GetCurrencySettingRow struct {
	ConfigKey   string `json:"config_key"`
	ConfigValue string `json:"config_value"`
}

func (q *Queries) GetCurrencySetting(ctx context.Context, arg GetCurrencySettingParams) ([]GetCurrencySettingRow, error) {
	rows, err := q.db.QueryContext(ctx, getCurrencySetting, arg.CurrencyID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCurrencySettingRow{}
	for rows.Next() {
		var i GetCurrencySettingRow
		if err := rows.Scan(&i.ConfigKey, &i.ConfigValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrencySettingUser = `-- name: GetCurrencySettingUser :many
SELECT id, config_key, config_value, currency_id, user_id, created_at, updated_at FROM currency_configurations_user WHERE currency_id = $1 AND user_id = $2
`

type GetCurrencySettingUserParams struct {
	CurrencyID int32     `json:"currency_id"`
	UserID     uuid.UUID `json:"user_id"`
}

func (q *Queries) GetCurrencySettingUser(ctx context.Context, arg GetCurrencySettingUserParams) ([]CurrencyConfigurationsUser, error) {
	rows, err := q.db.QueryContext(ctx, getCurrencySettingUser, arg.CurrencyID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CurrencyConfigurationsUser{}
	for rows.Next() {
		var i CurrencyConfigurationsUser
		if err := rows.Scan(
			&i.ID,
			&i.ConfigKey,
			&i.ConfigValue,
			&i.CurrencyID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrencySettingsSystem = `-- name: GetCurrencySettingsSystem :many
SELECT id, config_key, config_value, currency_id, created_at, updated_at FROM currency_configurations_system WHERE currency_id = $1
`

func (q *Queries) GetCurrencySettingsSystem(ctx context.Context, currencyID int32) ([]CurrencyConfigurationsSystem, error) {
	rows, err := q.db.QueryContext(ctx, getCurrencySettingsSystem, currencyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CurrencyConfigurationsSystem{}
	for rows.Next() {
		var i CurrencyConfigurationsSystem
		if err := rows.Scan(
			&i.ID,
			&i.ConfigKey,
			&i.ConfigValue,
			&i.CurrencyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurrencySettingSystem = `-- name: UpdateCurrencySettingSystem :one
UPDATE currency_configurations_system
SET config_value = $1
WHERE
    config_key = $2
    AND currency_id = $3
RETURNING id, config_key, config_value, currency_id, created_at, updated_at
`

type UpdateCurrencySettingSystemParams struct {
	ConfigValue string `json:"config_value"`
	ConfigKey   string `json:"config_key"`
	CurrencyID  int32  `json:"currency_id"`
}

func (q *Queries) UpdateCurrencySettingSystem(ctx context.Context, arg UpdateCurrencySettingSystemParams) (CurrencyConfigurationsSystem, error) {
	row := q.db.QueryRowContext(ctx, updateCurrencySettingSystem, arg.ConfigValue, arg.ConfigKey, arg.CurrencyID)
	var i CurrencyConfigurationsSystem
	err := row.Scan(
		&i.ID,
		&i.ConfigKey,
		&i.ConfigValue,
		&i.CurrencyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCurrencySettingUser = `-- name: UpdateCurrencySettingUser :one
UPDATE currency_configurations_user
SET config_value = $1
WHERE
    config_key = $2
    AND currency_id = $3
    AND user_id = $4
RETURNING id, config_key, config_value, currency_id, user_id, created_at, updated_at
`

type UpdateCurrencySettingUserParams struct {
	ConfigValue string    `json:"config_value"`
	ConfigKey   string    `json:"config_key"`
	CurrencyID  int32     `json:"currency_id"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateCurrencySettingUser(ctx context.Context, arg UpdateCurrencySettingUserParams) (CurrencyConfigurationsUser, error) {
	row := q.db.QueryRowContext(ctx, updateCurrencySettingUser,
		arg.ConfigValue,
		arg.ConfigKey,
		arg.CurrencyID,
		arg.UserID,
	)
	var i CurrencyConfigurationsUser
	err := row.Scan(
		&i.ID,
		&i.ConfigKey,
		&i.ConfigValue,
		&i.CurrencyID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
