// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: moneysendr_recipient.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createMoneySendrRecipient = `-- name: CreateMoneySendrRecipient :one
INSERT INTO moneysendr_recipients (
   email, phone, bank_name, bank_code, account_number, account_name,
   exchangeRateData,fromCurrencyCode,toCurrencyCode,amount_in,amount_out,
   fees,rate
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) RETURNING id, email, phone, bank_name, bank_code, account_number, account_name, created_at, updated_at, remark, status, exchangeratedata, fromcurrencycode, tocurrencycode, amount_in, amount_out, fees, rate, internal_remark
`

type CreateMoneySendrRecipientParams struct {
	Email            string          `json:"email"`
	Phone            string          `json:"phone"`
	BankName         string          `json:"bank_name"`
	BankCode         string          `json:"bank_code"`
	AccountNumber    string          `json:"account_number"`
	AccountName      string          `json:"account_name"`
	Exchangeratedata json.RawMessage `json:"exchangeratedata"`
	Fromcurrencycode string          `json:"fromcurrencycode"`
	Tocurrencycode   string          `json:"tocurrencycode"`
	AmountIn         decimal.Decimal `json:"amount_in"`
	AmountOut        decimal.Decimal `json:"amount_out"`
	Fees             decimal.Decimal `json:"fees"`
	Rate             decimal.Decimal `json:"rate"`
}

func (q *Queries) CreateMoneySendrRecipient(ctx context.Context, arg CreateMoneySendrRecipientParams) (MoneysendrRecipient, error) {
	row := q.db.QueryRowContext(ctx, createMoneySendrRecipient,
		arg.Email,
		arg.Phone,
		arg.BankName,
		arg.BankCode,
		arg.AccountNumber,
		arg.AccountName,
		arg.Exchangeratedata,
		arg.Fromcurrencycode,
		arg.Tocurrencycode,
		arg.AmountIn,
		arg.AmountOut,
		arg.Fees,
		arg.Rate,
	)
	var i MoneysendrRecipient
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.BankName,
		&i.BankCode,
		&i.AccountNumber,
		&i.AccountName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Remark,
		&i.Status,
		&i.Exchangeratedata,
		&i.Fromcurrencycode,
		&i.Tocurrencycode,
		&i.AmountIn,
		&i.AmountOut,
		&i.Fees,
		&i.Rate,
		&i.InternalRemark,
	)
	return i, err
}

const moneySendrFindTransaction = `-- name: MoneySendrFindTransaction :one
SELECT id, email, phone, bank_name, bank_code, account_number, account_name, created_at, updated_at, remark, status, exchangeratedata, fromcurrencycode, tocurrencycode, amount_in, amount_out, fees, rate, internal_remark FROM moneysendr_recipients WHERE (id = $1 OR phone = $2 OR email = $3) ORDER BY created_at DESC LIMIT 1
`

type MoneySendrFindTransactionParams struct {
	ID    uuid.UUID `json:"id"`
	Phone string    `json:"phone"`
	Email string    `json:"email"`
}

func (q *Queries) MoneySendrFindTransaction(ctx context.Context, arg MoneySendrFindTransactionParams) (MoneysendrRecipient, error) {
	row := q.db.QueryRowContext(ctx, moneySendrFindTransaction, arg.ID, arg.Phone, arg.Email)
	var i MoneysendrRecipient
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.BankName,
		&i.BankCode,
		&i.AccountNumber,
		&i.AccountName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Remark,
		&i.Status,
		&i.Exchangeratedata,
		&i.Fromcurrencycode,
		&i.Tocurrencycode,
		&i.AmountIn,
		&i.AmountOut,
		&i.Fees,
		&i.Rate,
		&i.InternalRemark,
	)
	return i, err
}

const moneySendrGetTransactionById = `-- name: MoneySendrGetTransactionById :one
SELECT id, email, phone, bank_name, bank_code, account_number, account_name, created_at, updated_at, remark, status, exchangeratedata, fromcurrencycode, tocurrencycode, amount_in, amount_out, fees, rate, internal_remark FROM moneysendr_recipients WHERE id = $1 LIMIT 1
`

func (q *Queries) MoneySendrGetTransactionById(ctx context.Context, id uuid.UUID) (MoneysendrRecipient, error) {
	row := q.db.QueryRowContext(ctx, moneySendrGetTransactionById, id)
	var i MoneysendrRecipient
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.BankName,
		&i.BankCode,
		&i.AccountNumber,
		&i.AccountName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Remark,
		&i.Status,
		&i.Exchangeratedata,
		&i.Fromcurrencycode,
		&i.Tocurrencycode,
		&i.AmountIn,
		&i.AmountOut,
		&i.Fees,
		&i.Rate,
		&i.InternalRemark,
	)
	return i, err
}

const moneySendrGetTransactionByStatus = `-- name: MoneySendrGetTransactionByStatus :one
SELECT id, email, phone, bank_name, bank_code, account_number, account_name, created_at, updated_at, remark, status, exchangeratedata, fromcurrencycode, tocurrencycode, amount_in, amount_out, fees, rate, internal_remark FROM moneysendr_recipients WHERE status = $1 AND (phone = $2 OR email = $3) LIMIT 1
`

type MoneySendrGetTransactionByStatusParams struct {
	Status string `json:"status"`
	Phone  string `json:"phone"`
	Email  string `json:"email"`
}

func (q *Queries) MoneySendrGetTransactionByStatus(ctx context.Context, arg MoneySendrGetTransactionByStatusParams) (MoneysendrRecipient, error) {
	row := q.db.QueryRowContext(ctx, moneySendrGetTransactionByStatus, arg.Status, arg.Phone, arg.Email)
	var i MoneysendrRecipient
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.BankName,
		&i.BankCode,
		&i.AccountNumber,
		&i.AccountName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Remark,
		&i.Status,
		&i.Exchangeratedata,
		&i.Fromcurrencycode,
		&i.Tocurrencycode,
		&i.AmountIn,
		&i.AmountOut,
		&i.Fees,
		&i.Rate,
		&i.InternalRemark,
	)
	return i, err
}

const moneySendrUpdateTransactionState = `-- name: MoneySendrUpdateTransactionState :one
UPDATE moneysendr_recipients SET status = $1, remark = $2, internal_remark = $3  WHERE id = $4 RETURNING id, email, phone, bank_name, bank_code, account_number, account_name, created_at, updated_at, remark, status, exchangeratedata, fromcurrencycode, tocurrencycode, amount_in, amount_out, fees, rate, internal_remark
`

type MoneySendrUpdateTransactionStateParams struct {
	Status         string    `json:"status"`
	Remark         string    `json:"remark"`
	InternalRemark string    `json:"internal_remark"`
	ID             uuid.UUID `json:"id"`
}

func (q *Queries) MoneySendrUpdateTransactionState(ctx context.Context, arg MoneySendrUpdateTransactionStateParams) (MoneysendrRecipient, error) {
	row := q.db.QueryRowContext(ctx, moneySendrUpdateTransactionState,
		arg.Status,
		arg.Remark,
		arg.InternalRemark,
		arg.ID,
	)
	var i MoneysendrRecipient
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.BankName,
		&i.BankCode,
		&i.AccountNumber,
		&i.AccountName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Remark,
		&i.Status,
		&i.Exchangeratedata,
		&i.Fromcurrencycode,
		&i.Tocurrencycode,
		&i.AmountIn,
		&i.AmountOut,
		&i.Fees,
		&i.Rate,
		&i.InternalRemark,
	)
	return i, err
}
