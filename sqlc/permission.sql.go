// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permission.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addPermissionForUser = `-- name: AddPermissionForUser :one
INSERT INTO users_permissions (user_id, permission_id) VALUES ($1, $2) RETURNING user_id, permission_id
`

type AddPermissionForUserParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PermissionID int64     `json:"permission_id"`
}

func (q *Queries) AddPermissionForUser(ctx context.Context, arg AddPermissionForUserParams) (UsersPermission, error) {
	row := q.db.QueryRowContext(ctx, addPermissionForUser, arg.UserID, arg.PermissionID)
	var i UsersPermission
	err := row.Scan(&i.UserID, &i.PermissionID)
	return i, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (
    name,
    code
) VALUES ($1, $2) RETURNING id, name, code
`

type CreatePermissionParams struct {
	Name string `json:"name"`
	Code string `json:"code"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission, arg.Name, arg.Code)
	var i Permission
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const deletePermissionFromUser = `-- name: DeletePermissionFromUser :exec
DELETE FROM users_permissions WHERE user_id = $1 AND permission_id = $2
`

type DeletePermissionFromUserParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PermissionID int64     `json:"permission_id"`
}

func (q *Queries) DeletePermissionFromUser(ctx context.Context, arg DeletePermissionFromUserParams) error {
	_, err := q.db.ExecContext(ctx, deletePermissionFromUser, arg.UserID, arg.PermissionID)
	return err
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT id, name, code FROM permissions
`

func (q *Queries) GetAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name, &i.Code); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserPermissions = `-- name: GetAllUserPermissions :many
SELECT permissions.code, permissions.name, permissions.id
FROM permissions
         INNER JOIN users_permissions ON users_permissions.permission_id = permissions.id
         INNER JOIN users ON users_permissions.user_id = users.id
WHERE users.id = $1
`

type GetAllUserPermissionsRow struct {
	Code string `json:"code"`
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) GetAllUserPermissions(ctx context.Context, id uuid.UUID) ([]GetAllUserPermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserPermissions, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUserPermissionsRow{}
	for rows.Next() {
		var i GetAllUserPermissionsRow
		if err := rows.Scan(&i.Code, &i.Name, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermission = `-- name: GetPermission :one
SELECT id, name, code FROM permissions WHERE id = $1 LIMIT  1
`

func (q *Queries) GetPermission(ctx context.Context, id int64) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermission, id)
	var i Permission
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const getPermissionByCode = `-- name: GetPermissionByCode :one
SELECT id, name, code FROM permissions WHERE code = $1 LIMIT  1
`

func (q *Queries) GetPermissionByCode(ctx context.Context, code string) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByCode, code)
	var i Permission
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const getPermissionForUser = `-- name: GetPermissionForUser :one
SELECT user_id, permission_id FROM users_permissions WHERE user_id = $1 AND permission_id = $2 LIMIT 1
`

type GetPermissionForUserParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PermissionID int64     `json:"permission_id"`
}

func (q *Queries) GetPermissionForUser(ctx context.Context, arg GetPermissionForUserParams) (UsersPermission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionForUser, arg.UserID, arg.PermissionID)
	var i UsersPermission
	err := row.Scan(&i.UserID, &i.PermissionID)
	return i, err
}

const getPermissionsForUser = `-- name: GetPermissionsForUser :many
SELECT permissions.code
    FROM permissions
         INNER JOIN users_permissions ON users_permissions.permission_id = permissions.id
         INNER JOIN users ON users_permissions.user_id = users.id
    WHERE users.id = $1
`

func (q *Queries) GetPermissionsForUser(ctx context.Context, id uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsForUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPermissionByCode = `-- name: GetUserPermissionByCode :one
SELECT permissions.code, permissions.name, permissions.id
FROM permissions
         INNER JOIN users_permissions ON users_permissions.permission_id = permissions.id
WHERE users_permissions.user_id =  $1 AND permissions.code = $2
`

type GetUserPermissionByCodeParams struct {
	UserID uuid.UUID `json:"user_id"`
	Code   string    `json:"code"`
}

type GetUserPermissionByCodeRow struct {
	Code string `json:"code"`
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) GetUserPermissionByCode(ctx context.Context, arg GetUserPermissionByCodeParams) (GetUserPermissionByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPermissionByCode, arg.UserID, arg.Code)
	var i GetUserPermissionByCodeRow
	err := row.Scan(&i.Code, &i.Name, &i.ID)
	return i, err
}
