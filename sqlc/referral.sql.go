// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: referral.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const archiveReferral = `-- name: ArchiveReferral :one
UPDATE referrals SET status = 'archived' WHERE phone = $1 RETURNING id, country_code, phone, referee_id, status, created_at, updated_at
`

func (q *Queries) ArchiveReferral(ctx context.Context, phone string) (Referral, error) {
	row := q.db.QueryRowContext(ctx, archiveReferral, phone)
	var i Referral
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Phone,
		&i.RefereeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createReferral = `-- name: CreateReferral :one
INSERT INTO referrals (phone, country_code, referee_id) VALUES ($1, $2, $3) RETURNING id, country_code, phone, referee_id, status, created_at, updated_at
`

type CreateReferralParams struct {
	Phone       string    `json:"phone"`
	CountryCode string    `json:"country_code"`
	RefereeID   uuid.UUID `json:"referee_id"`
}

func (q *Queries) CreateReferral(ctx context.Context, arg CreateReferralParams) (Referral, error) {
	row := q.db.QueryRowContext(ctx, createReferral, arg.Phone, arg.CountryCode, arg.RefereeID)
	var i Referral
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Phone,
		&i.RefereeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReferral = `-- name: DeleteReferral :exec
DELETE FROM referrals WHERE referee_id = $1 AND id = $2
`

type DeleteReferralParams struct {
	RefereeID uuid.UUID `json:"referee_id"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) DeleteReferral(ctx context.Context, arg DeleteReferralParams) error {
	_, err := q.db.ExecContext(ctx, deleteReferral, arg.RefereeID, arg.ID)
	return err
}

const getProspectiveReferralCount = `-- name: GetProspectiveReferralCount :one
SELECT count(*) FROM referrals WHERE referee_id = $1 AND status = 'processing'
`

func (q *Queries) GetProspectiveReferralCount(ctx context.Context, refereeID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProspectiveReferralCount, refereeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getReferralByID = `-- name: GetReferralByID :one
SELECT id, country_code, phone, referee_id, status, created_at, updated_at FROM referrals WHERE id = $1
`

func (q *Queries) GetReferralByID(ctx context.Context, id uuid.UUID) (Referral, error) {
	row := q.db.QueryRowContext(ctx, getReferralByID, id)
	var i Referral
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Phone,
		&i.RefereeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReferralByPhone = `-- name: GetReferralByPhone :one
SELECT id, country_code, phone, referee_id, status, created_at, updated_at FROM referrals WHERE phone = $1
`

func (q *Queries) GetReferralByPhone(ctx context.Context, phone string) (Referral, error) {
	row := q.db.QueryRowContext(ctx, getReferralByPhone, phone)
	var i Referral
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Phone,
		&i.RefereeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserReferrals = `-- name: GetUserReferrals :many
SELECT id, country_code, phone, referee_id, status, created_at, updated_at FROM referrals WHERE referee_id = $1
`

func (q *Queries) GetUserReferrals(ctx context.Context, refereeID uuid.UUID) ([]Referral, error) {
	rows, err := q.db.QueryContext(ctx, getUserReferrals, refereeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Referral{}
	for rows.Next() {
		var i Referral
		if err := rows.Scan(
			&i.ID,
			&i.CountryCode,
			&i.Phone,
			&i.RefereeID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
