package forms

import (
	"context"
	"encoding/json"
	"github.com/google/uuid"
	db "github.com/timchuks/monieverse/internal/db/sqlc"
)

func CreateKYCForm(ctx context.Context, store db.Store, creatorID uuid.UUID) error {
	input := &db.FormDefinitionInput{
		Name:             "Know Your Customer (KYC) Verification",
		Slug:             "kyc-verification",
		Description:      "Complete KYC verification process",
		FormType:         "kyc",
		IsMultiStep:      true,
		RequiresApproval: true,
		CreatedBy:        creatorID,
		ApprovalWorkflow: &db.ApprovalWorkflowInput{
			States: []map[string]interface{}{
				{
					"name":        "submitted",
					"label":       map[string]string{"en": "Submitted"},
					"is_final":    false,
					"permissions": []string{"user"},
				},
				{
					"name":        "under_review",
					"label":       map[string]string{"en": "Under Review"},
					"is_final":    false,
					"permissions": []string{"compliance"},
				},
				{
					"name":        "additional_info_required",
					"label":       map[string]string{"en": "Additional Information Required"},
					"is_final":    false,
					"permissions": []string{"compliance"},
				},
				{
					"name":        "approved",
					"label":       map[string]string{"en": "Approved"},
					"is_final":    true,
					"permissions": []string{"compliance"},
				},
				{
					"name":        "rejected",
					"label":       map[string]string{"en": "Rejected"},
					"is_final":    true,
					"permissions": []string{"compliance"},
				},
			},
		},
		Steps: []db.StepInput{
			{
				StepNumber:  1,
				Name:        "Personal Information",
				Description: "Basic personal details",
				IsOptional:  false,
			},
			{
				StepNumber:  2,
				Name:        "Identity Verification",
				Description: "Upload identity documents",
				IsOptional:  false,
			},
			{
				StepNumber:  3,
				Name:        "Address Verification",
				Description: "Verify your residential address",
				IsOptional:  false,
			},
			{
				StepNumber:  4,
				Name:        "Financial Information",
				Description: "Source of funds and employment details",
				IsOptional:  false,
			},
		},
		Fields: []db.FieldInput{
			// Step 1: Personal Information
			{
				FieldName:    "legal_first_name",
				FieldType:    "text",
				StepNumber:   1,
				Label:        map[string]string{"en": "Legal First Name"},
				DisplayOrder: 1,
				IsRequired:   true,
				ValidationRules: map[string]interface{}{
					"required":   true,
					"min_length": 2,
					"max_length": 50,
					"pattern":    "^[a-zA-Z\\s-']+$",
				},
			},
			{
				FieldName:    "legal_middle_name",
				FieldType:    "text",
				StepNumber:   1,
				Label:        map[string]string{"en": "Legal Middle Name (optional)"},
				DisplayOrder: 2,
				IsRequired:   false,
			},
			{
				FieldName:    "legal_last_name",
				FieldType:    "text",
				StepNumber:   1,
				Label:        map[string]string{"en": "Legal Last Name"},
				DisplayOrder: 3,
				IsRequired:   true,
				ValidationRules: map[string]interface{}{
					"required":   true,
					"min_length": 2,
					"max_length": 50,
					"pattern":    "^[a-zA-Z\\s-']+$",
				},
			},
			{
				FieldName:    "date_of_birth",
				FieldType:    "date",
				StepNumber:   1,
				Label:        map[string]string{"en": "Date of Birth"},
				DisplayOrder: 4,
				IsRequired:   true,
				ValidationRules: map[string]interface{}{
					"required": true,
					"custom_rules": map[string]interface{}{
						"age_verification": map[string]interface{}{
							"min_age": 18,
							"max_age": 100,
						},
					},
				},
			},
			{
				FieldName:    "nationality",
				FieldType:    "select",
				StepNumber:   1,
				Label:        map[string]string{"en": "Nationality"},
				DisplayOrder: 5,
				IsRequired:   true,
				Options: map[string]interface{}{
					"type": "dynamic",
					"dynamic": map[string]interface{}{
						"source_name": "countries",
					},
				},
			},
			{
				FieldName:    "tax_identification_number",
				FieldType:    "text",
				StepNumber:   1,
				Label:        map[string]string{"en": "Tax Identification Number"},
				HelpText:     map[string]string{"en": "SSN for US citizens, SIN for Canadians, etc."},
				DisplayOrder: 6,
				IsRequired:   true,
				ValidationRules: map[string]interface{}{
					"required": true,
					"custom_rules": map[string]interface{}{
						"tin_validation": map[string]interface{}{
							"country": "{{nationality}}",
						},
					},
				},
			},

			// Step 2: Identity Verification
			{
				FieldName:    "id_type",
				FieldType:    "select",
				StepNumber:   2,
				Label:        map[string]string{"en": "Identification Type"},
				DisplayOrder: 7,
				IsRequired:   true,
				Options: map[string]interface{}{
					"type": "static",
					"static": []map[string]interface{}{
						{"value": "passport", "label": map[string]string{"en": "Passport"}},
						{"value": "drivers_license", "label": map[string]string{"en": "Driver's License"}},
						{"value": "national_id", "label": map[string]string{"en": "National ID Card"}},
					},
				},
			},
			{
				FieldName:    "id_number",
				FieldType:    "text",
				StepNumber:   2,
				Label:        map[string]string{"en": "ID Number"},
				DisplayOrder: 8,
				IsRequired:   true,
				ValidationRules: map[string]interface{}{
					"required": true,
					"custom_rules": map[string]interface{}{
						"id_number_validation": map[string]interface{}{
							"id_type": "{{id_type}}",
							"country": "{{nationality}}",
						},
					},
				},
			},
			{
				FieldName:    "id_expiry_date",
				FieldType:    "date",
				StepNumber:   2,
				Label:        map[string]string{"en": "ID Expiry Date"},
				DisplayOrder: 9,
				IsRequired:   true,
				ValidationRules: map[string]interface{}{
					"required": true,
					"custom_rules": map[string]interface{}{
						"future_date": map[string]interface{}{
							"min_days": 30, // Must be valid for at least 30 days
						},
					},
				},
			},
			{
				FieldName:    "id_front",
				FieldType:    "file",
				StepNumber:   2,
				Label:        map[string]string{"en": "ID Document (Front)"},
				HelpText:     map[string]string{"en": "Clear photo or scan of the front of your ID"},
				DisplayOrder: 10,
				IsRequired:   true,
				FileConfig: map[string]interface{}{
					"max_size":      10485760, // 10MB
					"allowed_types": []string{"image/jpeg", "image/png", "application/pdf"},
				},
			},
			{
				FieldName:    "id_back",
				FieldType:    "file",
				StepNumber:   2,
				Label:        map[string]string{"en": "ID Document (Back)"},
				HelpText:     map[string]string{"en": "Clear photo or scan of the back of your ID"},
				DisplayOrder: 11,
				IsRequired:   true,
				ConditionalLogic: map[string]interface{}{
					"action": "show",
					"conditions": []map[string]interface{}{
						{
							"field":    "id_type",
							"operator": "not_equals",
							"value":    "passport",
						},
					},
					"logic": "all",
				},
				FileConfig: map[string]interface{}{
					"max_size":      10485760,
					"allowed_types": []string{"image/jpeg", "image/png", "application/pdf"},
				},
			},
			{
				FieldName:    "selfie_with_id",
				FieldType:    "file",
				StepNumber:   2,
				Label:        map[string]string{"en": "Selfie with ID"},
				HelpText:     map[string]string{"en": "Take a selfie holding your ID next to your face"},
				DisplayOrder: 12,
				IsRequired:   true,
				FileConfig: map[string]interface{}{
					"max_size":      10485760,
					"allowed_types": []string{"image/jpeg", "image/png"},
				},
			},

			// Step 3: Address Verification
			{
				FieldName:    "residential_address",
				FieldType:    "text",
				StepNumber:   3,
				Label:        map[string]string{"en": "Residential Address"},
				DisplayOrder: 13,
				IsRequired:   true,
				ValidationRules: map[string]interface{}{
					"required":   true,
					"min_length": 10,
					"max_length": 200,
				},
			},
			{
				FieldName:    "address_city",
				FieldType:    "text",
				StepNumber:   3,
				Label:        map[string]string{"en": "City"},
				DisplayOrder: 14,
				IsRequired:   true,
			},
			{
				FieldName:    "address_state",
				FieldType:    "text",
				StepNumber:   3,
				Label:        map[string]string{"en": "State/Province"},
				DisplayOrder: 15,
				IsRequired:   true,
			},
			{
				FieldName:    "address_postal_code",
				FieldType:    "text",
				StepNumber:   3,
				Label:        map[string]string{"en": "Postal Code"},
				DisplayOrder: 16,
				IsRequired:   true,
			},
			{
				FieldName:    "address_country",
				FieldType:    "select",
				StepNumber:   3,
				Label:        map[string]string{"en": "Country"},
				DisplayOrder: 17,
				IsRequired:   true,
				Options: map[string]interface{}{
					"type": "dynamic",
					"dynamic": map[string]interface{}{
						"source_name": "countries",
					},
				},
			},
			{
				FieldName:    "proof_of_address",
				FieldType:    "file",
				StepNumber:   3,
				Label:        map[string]string{"en": "Proof of Address"},
				HelpText:     map[string]string{"en": "Utility bill, bank statement, or government document (not older than 3 months)"},
				DisplayOrder: 18,
				IsRequired:   true,
				FileConfig: map[string]interface{}{
					"max_size":      10485760,
					"allowed_types": []string{"application/pdf", "image/jpeg", "image/png"},
				},
			},

			// Step 4: Financial Information
			{
				FieldName:    "employment_status",
				FieldType:    "select",
				StepNumber:   4,
				Label:        map[string]string{"en": "Employment Status"},
				DisplayOrder: 19,
				IsRequired:   true,
				Options: map[string]interface{}{
					"type": "static",
					"static": []map[string]interface{}{
						{"value": "employed", "label": map[string]string{"en": "Employed"}},
						{"value": "self_employed", "label": map[string]string{"en": "Self-Employed"}},
						{"value": "unemployed", "label": map[string]string{"en": "Unemployed"}},
						{"value": "retired", "label": map[string]string{"en": "Retired"}},
						{"value": "student", "label": map[string]string{"en": "Student"}},
					},
				},
			},
			{
				FieldName:    "employer_name",
				FieldType:    "text",
				StepNumber:   4,
				Label:        map[string]string{"en": "Employer Name"},
				DisplayOrder: 20,
				IsRequired:   true,
				ConditionalLogic: map[string]interface{}{
					"action": "show",
					"conditions": []map[string]interface{}{
						{
							"field":    "employment_status",
							"operator": "equals",
							"value":    "employed",
						},
					},
					"logic": "all",
				},
			},
			{
				FieldName:    "occupation",
				FieldType:    "text",
				StepNumber:   4,
				Label:        map[string]string{"en": "Occupation/Job Title"},
				DisplayOrder: 21,
				IsRequired:   true,
				ConditionalLogic: map[string]interface{}{
					"action": "show",
					"conditions": []map[string]interface{}{
						{
							"field":    "employment_status",
							"operator": "in",
							"value":    []string{"employed", "self_employed"},
						},
					},
					"logic": "all",
				},
			},
			{
				FieldName:    "annual_income",
				FieldType:    "select",
				StepNumber:   4,
				Label:        map[string]string{"en": "Annual Income"},
				DisplayOrder: 22,
				IsRequired:   true,
				Options: map[string]interface{}{
					"type": "static",
					"static": []map[string]interface{}{
						{"value": "0-25000", "label": map[string]string{"en": "$0 - $25,000"}},
						{"value": "25000-50000", "label": map[string]string{"en": "$25,000 - $50,000"}},
						{"value": "50000-100000", "label": map[string]string{"en": "$50,000 - $100,000"}},
						{"value": "100000-250000", "label": map[string]string{"en": "$100,000 - $250,000"}},
						{"value": "250000+", "label": map[string]string{"en": "$250,000+"}},
					},
				},
			},
			{
				FieldName:    "source_of_funds",
				FieldType:    "checkbox",
				StepNumber:   4,
				Label:        map[string]string{"en": "Source of Funds"},
				HelpText:     map[string]string{"en": "Select all that apply"},
				DisplayOrder: 23,
				IsRequired:   true,
				Options: map[string]interface{}{
					"type": "static",
					"static": []map[string]interface{}{
						{"value": "salary", "label": map[string]string{"en": "Salary/Wages"}},
						{"value": "business", "label": map[string]string{"en": "Business Income"}},
						{"value": "investments", "label": map[string]string{"en": "Investments"}},
						{"value": "inheritance", "label": map[string]string{"en": "Inheritance"}},
						{"value": "savings", "label": map[string]string{"en": "Savings"}},
						{"value": "other", "label": map[string]string{"en": "Other"}},
					},
				},
				ValidationRules: map[string]interface{}{
					"required":  true,
					"min_items": 1,
				},
			},
			{
				FieldName:    "purpose_of_account",
				FieldType:    "checkbox",
				StepNumber:   4,
				Label:        map[string]string{"en": "Purpose of Account"},
				HelpText:     map[string]string{"en": "Select all that apply"},
				DisplayOrder: 24,
				IsRequired:   true,
				Options: map[string]interface{}{
					"type": "static",
					"static": []map[string]interface{}{
						{"value": "personal_remittance", "label": map[string]string{"en": "Personal Remittance"}},
						{"value": "business_payments", "label": map[string]string{"en": "Business Payments"}},
						{"value": "investments", "label": map[string]string{"en": "Investments"}},
						{"value": "savings", "label": map[string]string{"en": "Savings"}},
						{"value": "education", "label": map[string]string{"en": "Education Expenses"}},
						{"value": "travel", "label": map[string]string{"en": "Travel"}},
					},
				},
				ValidationRules: map[string]interface{}{
					"required":  true,
					"min_items": 1,
				},
			},
		},
		PersistenceConfig: &db.PersistenceConfigInput{
			PersistenceMode: "multi_table",
			TargetConfigs: []map[string]interface{}{
				{"table_name": "users", "priority": 1},
				{"table_name": "identity_verification_data", "priority": 2},
				{"table_name": "user_meta", "priority": 3},
			},
			FieldMappings: map[string]interface{}{
				"legal_first_name": map[string]interface{}{
					"form_field":  "legal_first_name",
					"table_name":  "users",
					"column_name": "first_name",
					"data_type":   "varchar",
				},
				"legal_middle_name": map[string]interface{}{
					"form_field":  "legal_middle_name",
					"table_name":  "users",
					"column_name": "middle_name",
					"data_type":   "varchar",
				},
				"legal_last_name": map[string]interface{}{
					"form_field":  "legal_last_name",
					"table_name":  "users",
					"column_name": "last_name",
					"data_type":   "varchar",
				},
				"date_of_birth": map[string]interface{}{
					"form_field":  "date_of_birth",
					"table_name":  "identity_verification_data",
					"column_name": "date_of_birth",
					"data_type":   "date",
				},
				"tax_identification_number": map[string]interface{}{
					"form_field":   "tax_identification_number",
					"table_name":   "identity_verification_data",
					"column_name":  "document_number",
					"data_type":    "varchar",
					"is_encrypted": true,
				},
				"residential_address": map[string]interface{}{
					"form_field":  "residential_address",
					"table_name":  "users",
					"column_name": "address",
					"data_type":   "text",
				},
				"address_city": map[string]interface{}{
					"form_field":  "address_city",
					"table_name":  "users",
					"column_name": "city",
					"data_type":   "varchar",
				},
				"address_state": map[string]interface{}{
					"form_field":  "address_state",
					"table_name":  "users",
					"column_name": "state",
					"data_type":   "varchar",
				},
				"address_postal_code": map[string]interface{}{
					"form_field":  "address_postal_code",
					"table_name":  "users",
					"column_name": "zipcode",
					"data_type":   "varchar",
				},
				"employment_status": map[string]interface{}{
					"form_field":  "employment_status",
					"table_name":  "user_meta",
					"column_name": "value",
					"data_type":   "varchar",
					"meta_key":    "employment_status",
				},
				"annual_income": map[string]interface{}{
					"form_field":  "annual_income",
					"table_name":  "user_meta",
					"column_name": "value",
					"data_type":   "varchar",
					"meta_key":    "annual_income",
				},
			},
		},
	}

	form, err := store.CreateFormDefinitionTx(ctx, input)
	if err != nil {
		return err
	}

	// Create different assignments based on jurisdiction

	// US Citizens - Enhanced KYC
	_, err = store.CreateFormAssignment(ctx, db.CreateFormAssignmentParams{
		ID:               uuid.New(),
		FormDefinitionID: form.ID,
		AssignmentType:   "country",
		AssignmentValue:  "US",
		Priority:         20,
		CreatedBy:        db.NewNullUUID(creatorID),
	})

	// EU Citizens - GDPR compliant version
	_, err = store.CreateFormAssignment(ctx, db.CreateFormAssignmentParams{
		ID:               uuid.New(),
		FormDefinitionID: form.ID,
		AssignmentType:   "custom",
		AssignmentValue:  "eu_citizens",
		Conditions: json.RawMessage(`{
            "country_in": ["DE", "FR", "IT", "ES", "NL", "BE", "AT", "PL"]
        }`),
		Priority:  15,
		CreatedBy: db.NewNullUUID(creatorID),
	})

	// Default for all other countries
	_, err = store.CreateFormAssignment(ctx, db.CreateFormAssignmentParams{
		ID:               uuid.New(),
		FormDefinitionID: form.ID,
		AssignmentType:   "custom",
		AssignmentValue:  "default",
		Priority:         1,
		CreatedBy:        db.NewNullUUID(creatorID),
	})

	// Create events

	// Webhook to external KYC provider
	webhookConfig, _ := json.Marshal(map[string]interface{}{
		"url":    "https://kyc-provider.com/api/verify",
		"method": "POST",
		"headers": map[string]string{
			"Authorization": "Bearer {{KYC_API_KEY}}",
			"Content-Type":  "application/json",
		},
		"body_template": `{
            "user_id": "{{user.id}}",
            "form_data": {{json submission_data}},
            "documents": {{json files}}
        }`,
	})

	_, err = store.CreateFormEvent(ctx, db.CreateFormEventParams{
		ID:               uuid.New(),
		FormDefinitionID: form.ID,
		EventType:        "after_submit",
		HandlerType:      "webhook",
		HandlerConfig:    webhookConfig,
		IsActive:         true,
	})

	// Email notification to compliance team
	emailConfig, _ := json.Marshal(map[string]interface{}{
		"template": "kyc_submitted_for_review",
		"to":       "compliance@company.com",
		"subject":  "New KYC Submission for Review",
	})

	_, err = store.CreateFormEvent(ctx, db.CreateFormEventParams{
		ID:               uuid.New(),
		FormDefinitionID: form.ID,
		EventType:        "after_submit",
		HandlerType:      "email",
		HandlerConfig:    emailConfig,
		IsActive:         true,
	})

	// Internal function to update user status
	internalConfig, _ := json.Marshal(map[string]interface{}{
		"function": "UpdateUserKYCStatus",
		"params": map[string]string{
			"status": "pending_verification",
		},
	})

	_, err = store.CreateFormEvent(ctx, db.CreateFormEventParams{
		ID:               uuid.New(),
		FormDefinitionID: form.ID,
		EventType:        "after_submit",
		HandlerType:      "internal_function",
		HandlerConfig:    internalConfig,
		IsActive:         true,
	})

	return err
}
